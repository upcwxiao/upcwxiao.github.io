<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hadoop</title>
    <url>/2022/06/12/db/hadoop/</url>
    <content><![CDATA[<ul>
<li>虚拟机安装centos<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、虚拟机使用的是VirtualBox，安装的是centos7</span><br><span class="line">2、机器名称依次为：c1 c2 c3，网卡设置两个，一个是nat，一个仅主机网络，时间设置联网时间</span><br><span class="line">  192.168.56.10 c1</span><br><span class="line">  192.168.56.11 c2</span><br><span class="line">  192.168.56.12 c3</span><br><span class="line">4、安装net-tools、ssh </span><br><span class="line">   yum provides ifconfig</span><br><span class="line">   yum install -y net-tools openssh openssh-server openssh-clients</span><br><span class="line">5、修改网卡为固定地址</span><br><span class="line">   cd /etc/sysconfig/network-scripts</span><br><span class="line">   修改ifcfg-enp0s为、</span><br><span class="line">   TYPE=&quot;Ethernet&quot;</span><br><span class="line">   PROXY_METHOD=&quot;none&quot;</span><br><span class="line">   BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">   BOOTPROTO=&quot;static&quot;</span><br><span class="line">   DEFROUTE=&quot;yes&quot;</span><br><span class="line">   IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">   IPV6INIT=&quot;yes&quot;</span><br><span class="line">   IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">   IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">   IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">   IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">   NAME=&quot;enp0s8&quot;</span><br><span class="line">   UUID=&quot;8503ec74-1684-37c8-a45e-88f945af88b5&quot;</span><br><span class="line">   DEVICE=&quot;enp0s8&quot;</span><br><span class="line">   ONBOOT=&quot;yes&quot;</span><br><span class="line">   IPADDR=192.168.56.10</span><br><span class="line">   NETMASK=255.255.255.0</span><br><span class="line">   GETWAY=192.168.56.1</span><br><span class="line">   DNS1=114.114.114.114</span><br><span class="line">   NDS2=8.8.8.8</span><br></pre></td></tr></table></figure>

</li>
</ul>
<span id="more"></span>

<ul>
<li><p>配置ssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br><span class="line">ssh-keygen -t rsa</span><br><span class="line">两种方式拷贝到带登录机器</span><br><span class="line"></span><br><span class="line">1、ssh-copy-id 命令将公钥复制或上传到远程主机，并将身份标识文件追加到远程主机的 ~/.ssh/authorized_keys中</span><br><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub 用户名@ip</span><br><span class="line"></span><br><span class="line">2、scp拷贝远程主机，手动追加到authorized_keys中</span><br><span class="line">scp ～/.ssh/id_rsa.pub 用户名@远程主机:~/.ssh/</span><br><span class="line">登录远程主机，执行</span><br><span class="line">cd ~/.ssh/</span><br><span class="line">cat id_rsa.pub &gt;&gt;authorized_keys</span><br><span class="line">chmod 600 authorized_keys</span><br></pre></td></tr></table></figure></li>
<li><p>配置jdk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_331</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br><span class="line"></span><br><span class="line"># 保存后执行</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>添加hadoop配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://archive.apache.org/dist/hadoop/common/hadoop-3.1.2/hadoop-3.1.2-site.tar.gz</span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">#!/bin/sh</span><br><span class="line">export HADOOP_HOME=/data0/collect/hadoop3.1.2</span><br><span class="line">export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br><span class="line"></span><br><span class="line"># 保存后执行</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">查看hadoop环境变量是否可用</span><br><span class="line">hadoop version</span><br></pre></td></tr></table></figure></li>
<li><p>更改配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、hadoop-env.sh</span><br><span class="line">  export JAVA_HOME=/usr/local/jdk1.8.0_331</span><br><span class="line">  export HADOOP_PID_DIR=/usr/local/hadoop3.1.2/hadoop_data/tmp/pids</span><br><span class="line">  export HDFS_NAMENODE_USER=root</span><br><span class="line">  export HDFS_DATANODE_USER=root</span><br><span class="line">  export HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line">  export YARN_RESOURCEMANAGER_USER=root</span><br><span class="line">  export YARN_NODEMANAGER_USER=root</span><br><span class="line"></span><br><span class="line">2、core-site.xml</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hdfs://c1:9000&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/usr/local/hadoop3.1.2/hadoop_data/tmp&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Abase for other temporary directories&lt;/description&gt; </span><br><span class="line">  &lt;/property&gt;</span><br><span class="line"></span><br><span class="line"> 1》 fs.defaultFS 配置哪个节点来启动hdfs</span><br><span class="line"> 2》 hadoop.tmp.dir 配置hadoop存储数据的路径，需要手动创建这个目录</span><br><span class="line"></span><br><span class="line">3、hdfs-site.xml</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;2&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.http-address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;c1:50070&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;c2:50090&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  1》 dfs.replication 设置文件的备份数量</span><br><span class="line">  2》 dfs.namenode.http-address 设置哪台虚拟机作为namenode节点</span><br><span class="line">  3》 dfs.namenode.secondary.http-address 设置哪台虚拟机作为冷备份namenode节点，用于辅助namenode</span><br><span class="line"></span><br><span class="line">4、mapred-site.xml</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">  1》 mapreduce.framework.name 配置yarn来进行任务调度</span><br><span class="line"></span><br><span class="line">5、yarn-site.xml</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;c2&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.application.classpath&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;/usr/local/hadoop3.1.2/etc/hadoop:/usr/local/hadoop3.1.2/share/hadoop/common/lib/*:/usr/local/hadoop3.1.2/share/hadoop/common/*:/usr/local/hadoop3.1.2/share/hadoop/hdfs:/usr/local/hadoop3.1.2/share/hadoop/hdfs/lib/*:/usr/local/hadoop3.1.2/share/hadoop/hdfs/*:/usr/local/hadoop3.1.2/share/hadoop/mapreduce/lib/*:/usr/local/hadoop3.1.2/share/hadoop/mapreduce/*:/usr/local/hadoop3.1.2/share/hadoop/yarn:/usr/local/hadoop3.1.2/share/hadoop/yarn/lib/*:/usr/local/hadoop3.1.2/share/hadoop/yarn/*&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  </span><br><span class="line">  1》 yarn.resourcemanager.hostname 配置yarn启动的主机名，也就是说配置在哪台虚拟机上就在那台虚拟机上进行启动</span><br><span class="line">  2》 yarn.application.classpath 配置yarn执行任务调度的类路径，如果不配置，yarn虽然可以启动，但执行不了mapreduce。执行hadoop classpath命令,将出现的类路径放在&lt;value&gt;标签里(注：其他机器启动是没有效果的）</span><br><span class="line"></span><br><span class="line">6、works</span><br><span class="line">  c1</span><br><span class="line">  c2</span><br><span class="line">  c3</span><br><span class="line">```&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;jdbc:mysql://localhost:3306/hive?useSSL=false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;root&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;123456&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;hive.metastore.schema.verification&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;动</span><br><span class="line">  start-all.sh</span><br></pre></td></tr></table></figure></li>
<li><p>hive</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、 配置hive-site.xml中mysql</span><br><span class="line">wget https://dlcdn.apache.org/hive/hive-3.1.2/apache-hive-3.1.2-bin.tar.gz</span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export HIVE_HOME=/usr/local/hive3.1.2</span><br><span class="line">export PATH=$HIVE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 保存后执行</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">2、cp hive-default.xml.template hive-site.xml</span><br><span class="line">   &lt;configuration&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;jdbc:mysql://localhost:3306/hive?useSSL=false&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;com.mysql.cj.jdbc.Driver&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;123456&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hive.metastore.schema.verification&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;false&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line">3、cp mysql驱动到lib下</span><br><span class="line">4、初始化mysql</span><br><span class="line">   schematool -dbType mysql -initSchema</span><br><span class="line">5、启动hive</span><br><span class="line">   hive</span><br></pre></td></tr></table></figure>
</li>
<li><p>问题</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、Exception in thread &quot;main&quot; java.lang.RuntimeException: com.ctc.wstx.exc.WstxParsingException: Illega</span><br><span class="line">注释掉报错行的特殊字符，例如：#8;</span><br><span class="line"></span><br><span class="line">2、HIVE Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: java.net.URIS</span><br><span class="line">将hive-site.xml文件中的$&#123;system:java.io.tmpdir&#125;替换为hive的临时目录（多个地方同时替换）</span><br><span class="line"></span><br><span class="line">3、show databases报错</span><br><span class="line">提示：Failed with exception Java.io.IOException:java.lang.IllegalArgumentException: java.NET.URISyntaxException: Relative path in absolute URI: $&#123;system:user.name&#125;</span><br><span class="line">hive-site.xml的 $&#123;ｓｙstem:user.name&#125; 替换成 $&#123;user.name&#125;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;name&gt;hive.exec.local.scratchdir&lt;/name&gt;</span><br><span class="line">  &lt;value&gt;/usr/local/hiv3.1.2//apache-hive-2.1.1-bin/tmp/$&#123;user.name&#125;&lt;/value&gt;</span><br><span class="line">  &lt;description&gt;Local scratch space for Hive jobs&lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>防火墙</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看防⽕墙状态</span><br><span class="line">⽅式⼀：systemctl status firewalld.service</span><br><span class="line">⽅式⼆：firewall-cmd --state</span><br><span class="line"></span><br><span class="line">临时关闭防⽕墙</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line">开启防⽕墙</span><br><span class="line">systemctl start firewalld.service</span><br><span class="line"></span><br><span class="line">开放8848端⼝</span><br><span class="line">firewall-cmd --zone=public --add-port=8848/tcp --permanent</span><br><span class="line"></span><br><span class="line">关闭8848端⼝</span><br><span class="line">firewall-cmd --zone=public --remove-port=8848/tcp --permanent</span><br><span class="line"></span><br><span class="line">刷新防⽕墙配置</span><br><span class="line">firewall-cmd --reload</span><br><span class="line"></span><br><span class="line">查看防⽕墙所有开放的端</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>参考<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/qq_25542879/article/details/89554068</span><br><span class="line">https://blog.csdn.net/qq_25542879/article/details/89681681</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>tcp</title>
    <url>/2022/02/24/system/tcp/</url>
    <content><![CDATA[<ul>
<li>1、状态<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、 CLOSED：初始状态，表示TCP连接是“关闭着的”或“未打开的”。</span><br><span class="line">2、 LISTEN：表示服务器端的某个SOCKET处于监听状态，可以接受客户端的连接。</span><br><span class="line">3、 SYN_RCVD：表示服务器接收到了来自客户端请求连接的SYN报文。在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂，基本上用netstat很难看到这种状态，除非故意写一个监测程序，将三次TCP握手过程中最后一个ACK报文不予发送。当TCP连接处于此状态时，再收到客户端的ACK报文，它就会进入到ESTABLISHED状态。</span><br><span class="line">4、 SYN_SENT：这个状态与SYN_RCVD状态相呼应，当客户端SOCKET执行connect()进行连接时，它首先发送SYN报文，然后随即进入到SYN_SENT状态，并等待服务端的发送三次握手中的第2个报文。SYN_SENT状态表示客户端已发送SYN报文。</span><br><span class="line">5、 ESTABLISHED：表示TCP连接已经成功建立。</span><br><span class="line">6、 FIN_WAIT_1：这个状态得好好解释一下，其实FIN_WAIT_1和FIN_WAIT_2两种状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET进入到FIN_WAIT_1状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2 态。当然在实际的正常情况下，无论对方处于任何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2状态有时仍可以用netstat看到。</span><br><span class="line">7、 FIN_WAIT_2：上面已经解释了这种状态的由来，实际上FIN_WAIT_2状态下的SOCKET表示半连接，即有一方调用close()主动要求关闭连接。注意：FIN_WAIT_2是没有超时的（不像TIME_WAIT状态），这种状态下如果对方不关闭（不配合完成4次挥手过程），那这个 FIN_WAIT_2状态将一直保持到系统重启，越来越多的FIN_WAIT_2状态会导致内核crash。</span><br><span class="line">8、 TIME_WAIT：表示收到了对方的FIN报文，并发送出了ACK报文。TIME_WAIT状态下的TCP连接会等待2*MSL（Max Segment Lifetime，最大分段生存期，指一个TCP报文在Internet上的最长生存时间。每个具体的TCP协议实现都必须选择一个确定的MSL值，RFC 1122建议是2分钟，但BSD传统实现采用了30秒，Linux可以cat /proc/sys/net/ipv4/tcp_fin_timeout看到本机的这个值），然后即可回到CLOSED可用状态了。如果FIN_WAIT_1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。（这种情况应该就是四次挥手变成三次挥手的那种情况）</span><br><span class="line">9、 CLOSING：这种状态在实际情况中应该很少见，属于一种比较罕见的例外状态。正常情况下，当一方发送FIN报文后，按理来说是应该先收到（或同时收到）对方的ACK报文，再收到对方的FIN报文。但是CLOSING 状态表示一方发送FIN报文后，并没有收到对方的ACK报文，反而却也收到了对方的FIN报文。什么情况下会出现此种情况呢？那就是当双方几乎在同时close()一个SOCKET的话，就出现了双方同时发送FIN报文的情况，这是就会出现CLOSING状态，表示双方都正在关闭SOCKET连接。</span><br><span class="line">10、 CLOSE_WAIT：表示正在等待关闭。怎么理解呢？当对方close()一个SOCKET后发送FIN报文给自己，你的系统毫无疑问地将会回应一个ACK报文给对方，此时TCP连接则进入到CLOSE_WAIT状态。接下来呢，你需要检查自己是否还有数据要发送给对方，如果没有的话，那你也就可以close()这个SOCKET并发送FIN报文给对方，即关闭自己到对方这个方向的连接。有数据的话则看程序的策略，继续发送或丢弃。简单地说，当你处于CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。</span><br><span class="line">11、 LAST_ACK：当被动关闭的一方在发送FIN报文后，等待对方的ACK报文的时候，就处于LAST_ACK状态。当收到对方的ACK报文后，也就可以进入到CLOSED可用状态了。</span><br></pre></td></tr></table></figure>

</li>
</ul>
<span id="more"></span>

<p><img src="/2022/02/24/system/tcp/tcp.png" alt="tcp"></p>
<ul>
<li>2、三次握手</li>
</ul>
<p><img src="/2022/02/24/system/tcp/three.png" alt="three"></p>
<ul>
<li>3、四次挥手</li>
</ul>
<p><img src="/2022/02/24/system/tcp/four.png" alt="four"></p>
<ul>
<li>4、tcp头</li>
</ul>
<p><img src="/2022/02/24/system/tcp/tcp_head.png" alt="tcp_head"></p>
<p>SYN：SYN= 1 表示这是一个连接请求或连接接受报文。在建立连接时用来进行同步序号。当SYN=1而ACK=0时，表明这是一个连接请求报文段。对方若是同意建立连接，则应响应的报文段中使SYN=1、ACK=1。因此SYN=1表示该报文是一个连接请求报文或者是一个连接请求接收报文。<br>ACK：确认号只有在该位设置为1的时候才生效，当该位为0是表示确认号无效。TCP规定，在TCP连接建立后所有传送的数据报文段ACK都必须设置为1。<br>FIN：当 FIN = 1 时，表明此报文段的发送方的数据已经发送完毕，并要求释放连接。</p>
<p>序号：占4个字节，它的范围在0-2^32-1，序号随着通信的进行不断的递增，当达到最大值的时候重新回到0在开始递增。TCP是面向字节流的，在一个TCP连接中传送的字节流中的每一个字节都按照顺序编号。整个要传送的字节流的起始号必须在连接建立时设置。首部中的序列号字段指的是本报文段所发送的数据的第一个字节的序号。例如，一个报文序号是301，而携带的数据共有100字节。则表示本次报文中的序号是301，下一个报文的序号是401.重复一下，每一个报文的序号是该报文包含的字节中第一个字节的编号。<br>确认号：占4个字节，确认号，是对下一个想要接受的字节的期望，这里隐式确认了对上一个数据包的成功接收。如上例，在成功接收了序号为301的数据包，想要接收下一个数据包因为上个数据包包含100字节，所以此时的确认号应该是401，表示希望接收下一个序号是401的数据包。</p>
<p>内容参考：<a href="https://www.cnblogs.com/qingergege/p/6603488.html">https://www.cnblogs.com/qingergege/p/6603488.html</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>tcp</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat</title>
    <url>/2022/02/22/language/tomcat/</url>
    <content><![CDATA[<ul>
<li>1、git地址<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/apache/tomcat.git</span><br></pre></td></tr></table></figure></li>
<li>2、创建catalina-home<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">创建catalina-home</span><br><span class="line">copy webapps、conf 到catalina-home下</span><br></pre></td></tr></table></figure>

</li>
</ul>
<span id="more"></span>

<ul>
<li>3、添加pom.xml<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;Tomcat8.5&lt;/artifactId&gt;</span><br><span class="line">  &lt;name&gt;Tomcat8.5&lt;/name&gt;</span><br><span class="line">  &lt;version&gt;8.5&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    &lt;finalName&gt;Tomcat8.5&lt;/finalName&gt;</span><br><span class="line">    &lt;sourceDirectory&gt;java&lt;/sourceDirectory&gt;</span><br><span class="line">    &lt;testSourceDirectory&gt;test&lt;/testSourceDirectory&gt;</span><br><span class="line">    &lt;resources&gt;</span><br><span class="line">      &lt;resource&gt;</span><br><span class="line">        &lt;directory&gt;java&lt;/directory&gt;</span><br><span class="line">      &lt;/resource&gt;</span><br><span class="line">    &lt;/resources&gt;</span><br><span class="line">    &lt;testResources&gt;</span><br><span class="line">      &lt;testResource&gt;</span><br><span class="line">        &lt;directory&gt;test&lt;/directory&gt;</span><br><span class="line">      &lt;/testResource&gt;</span><br><span class="line">    &lt;/testResources&gt;</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.3&lt;/version&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><br><span class="line">          &lt;source&gt;1.8&lt;/source&gt;</span><br><span class="line">          &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.easymock&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;easymock&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;ant&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;ant&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.7.0&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;wsdl4j&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;wsdl4j&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.6.2&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.xml&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jaxrpc&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.eclipse.jdt.core.compiler&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;ecj&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.5.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
4、设置运行环境vm option<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm option:</span><br><span class="line">-Dcatalina.home=/code/tomcat/catalina-home -Dcatalina.base=/code/tomcat/catalina-home -Djava.endorsed.dirs=/code/tomcat/catalina-home/endorsed -Djava.io.tmpdir=/code/tomcat/catalina-home/temp -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.util.logging.config.file=/code/tomcat/catalina-home/conf/logging.properties</span><br></pre></td></tr></table></figure>
5、注释掉报错的test用例<br>6、添加jsp解析器<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tomcat/java/org/apache/catalina/startup/ContextConfig.java</span><br><span class="line"></span><br><span class="line">context.addServletContainerInitializer(new JasperInitializer(), null);</span><br></pre></td></tr></table></figure>
<img src="/2022/02/22/language/tomcat/tomcat_jsp.png" alt="tomcat_jsp"></li>
</ul>
<p>7、控制台乱码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tomcat/java/org/apache/tomcat/util/res/StringManager.java</span><br><span class="line"></span><br><span class="line">getString 中添加</span><br><span class="line">// 解决日志打印乱码问题，默认编码（ISO-8859-1）修改为UTF-8</span><br><span class="line">try &#123;</span><br><span class="line">    str = new String(str.getBytes(&quot;ISO-8859-1&quot;), &quot;UTF-8&quot;);</span><br><span class="line">&#125;catch(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/02/22/language/tomcat/tomcat_encode_1.png" alt="tomcat_encode_1"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tomcat/java/org/apache/jasper/compiler/Localizer.java</span><br><span class="line"></span><br><span class="line">getMessage 中添加</span><br><span class="line">// 解决日志打印乱码问题，默认编码（ISO-8859-1）修改为UTF-8</span><br><span class="line">try &#123;</span><br><span class="line">    errMsg = new String(errMsg.getBytes(&quot;ISO-8859-1&quot;), &quot;UTF-8&quot;);</span><br><span class="line">&#125;catch(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/02/22/language/tomcat/tomcat_encode_2.png" alt="tomcat_encode_2"></p>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>国内外标准协会</title>
    <url>/2022/02/04/other/%E5%9B%BD%E5%86%85%E5%A4%96%E6%A0%87%E5%87%86%E5%8D%8F%E4%BC%9A/</url>
    <content><![CDATA[<ul>
<li><p>国际电信联盟 （International Telecommunication Union，简称ITU) 是联合国的一个重要专门机构，也是联合国机构中历史最长的一个国际组织，简称“国际电联”、“电联”或“ITU”。作为世界范围内联系各国政府和私营部门的纽带，国际电联通过其麾下的无线电通信、标准化和发展电信展览活动，而且是信息社会世界高峰会议的主办机构。<a href="https://www.itu.int">https://www.itu.int</a> </p>
</li>
<li><p>国际互联网工程任务组（The Internet Engineering Task Force，简称 IETF）是一个公开性质的大型民间国际团体，汇集了与互联网架构和互联网顺利运作相关的网络设计者、运营者、投资人和研究人员，并欢迎所有对此行业感兴趣的人士参与。当前绝大多数国际互联网技术标准出自IETF。<a href="https://www.ietf.org">https://www.ietf.org</a></p>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>国际标准化组织（International Organization for Standardization，简称为ISO）是标准化领域中的一个国际性非政府组织。ISO一来源于希腊语“ISOS”，即“EQUAL”——平等之意。<a href="https://www.iso.org">https://www.iso.org</a></p>
</li>
<li><p>电气与电子工程师协会（Institute of Electrical and Electronics Engineers），简称IEEE，总部位于美国纽约，是一个国际性的电子技术与信息科学工程师的协会，也是全球最大的非营利性专业技术学会，于1963年美国电气工程师学会(AIEE)和美国无线电工程师学会(IRE)合并而成。<a href="https://www.ieee.org">https://www.ieee.org</a></p>
</li>
<li><p>国际电工委员会（International Electrotechnical Commission，简称IEC）成立于1906年，它是世界上成立最早的国际性电工标准化机构，负责有关电气工程和电子工程领域中的国际标准化工作。<a href="https://www.iec.ch">https://www.iec.ch</a></p>
</li>
<li><p>美国国家标准学会（American National Standards Institute: ANSI）成立于1918年，是负责制定美国国家标准的非营利组织。</p>
</li>
<li><p>国家标准化委员会，GB，国家标准分为强制性国标（GB）和推荐性国标（GB/T）。</p>
</li>
<li><p>英国标准学会（Britain Standard Institute，简称BSI）制订英国标准。</p>
</li>
<li><p>EN（欧洲标准），按参加国所承担的共同义务，通过此EN标准将赋予某成员国的有关国家标准以合法地位，或撤销与之相对立的某一国家的有关标准。也就是说成员国的国家标准必须与EN标准保持一致。</p>
</li>
<li><p>NF是法国标准的代号，1938年开始实行，其管理机构是法国标准化协会(AFNOR)。法国每 3年编制一次标准制修订计划，每年进行一次调整。</p>
</li>
<li><p>日本工业标准(JIS,Japanese Industrial Standards)是日本国家级标准中最重要、最权威的标准。</p>
</li>
<li><p>德国标准化学会（DIN）是德国最大的具有广泛代表性的公益性标准化民间机构。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>开源软件基金</title>
    <url>/2022/01/30/other/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%9F%BA%E9%87%91/</url>
    <content><![CDATA[<ul>
<li><p>自由软件基金会（FSF），即 Free Software Foundation，是一个致力于推广自由软件、促进计算机用户自由的美国民间非盈利性组织，它于1985年10月由理查德·斯托曼建立，其主要工作是执行 GNU 计划，开发更多的自由软件，完善自由软件理念。自由软件并不意味着免费（free of charge），而是自由意义上的自由（but free as in freedom）。<a href="https://www.fsf.org">https://www.fsf.org</a><br>The Free Software Foundation (FSF) is a nonprofit with a worldwide mission to promote computer user freedom. We defend the rights of all software users.</p>
</li>
<li><p>开放源代码促进会（OSI），即 Open Source Initiative，又译作开放源代码组织，是一个旨在推动开源软件发展的非盈利组织，由 Bruce Perens 及 埃里克·斯蒂芬·雷蒙 等人于1998年2月创建。术语 open source 始于1998年，由一群想让他们自己与自由软件运动的思想言论有点区别的人们创建，旨在让自由软件对商业利益更具吸引力。<a href="https://opensource.org">https://opensource.org</a></p>
</li>
<li><p>Apache 软件基金会（Apache Software Foundation，简称 ASF）正式创建于 1999 年，其前身是由一群开发爱好者构成的 “Apache Group”，他们通过 Brian Behlendorf 创建的邮件列表进行技术交流。托管于 ASF 的项目均遵循 Apache License。 <a href="https://apache.org">https://apache.org</a></p>
</li>
</ul>
<span id="more"></span>

<ul>
<li><p>Linux 基金会（Linux Foundation，简称 LF）成立于 2000 年，其目的在于协调和推动Linux系统的发展，以及宣传、保护和规范Linux。LF 开始于 2000 年的开源码发展实验室 (OSDL)，并与自由标准组织 (FSG) 合并后从而成为现在的组织。Linux 基金会赞助 Linux 创始人 Linus Torvalds 和主管维护者 Greg Kroah-Hartman 的工作。<a href="https://www.linuxfoundation.org">https://www.linuxfoundation.org</a></p>
</li>
<li><p>GNOME 基金会 (GNOME Foundation) 正式成立于 2010 年，它是一个非盈利组织，负责协调 GNOME 项目的各项工作。GNOME 基金会致力于达成 GNOME 项目的目标：即创建一个基于自由著作权协议的计算机平台。<a href="https://www.gnome.org">https://www.gnome.org</a></p>
</li>
<li><p>Mozilla 基金会 (Mozilla Foundation) 是为支持和领导开放源代码项目而设立的一个非营利组织。该组织制定管理开发政策，经营关键基础组织和管理商标及知识产权。它拥有一个子公司：Mozilla 公司，用来雇佣开发人员开发 Mozilla Firefox 浏览器和 Mozilla Thunderbird 电子邮件客户端。<a href="https://foundation.mozilla.org">https://foundation.mozilla.org</a></p>
</li>
<li><p>Eclipse 基金会 (Eclipse Foundation) 成立于 2004 年，Eclipse 联盟（一个软件行业的联盟组织）发起成立了 Eclipse 基金会，由包括开发者、消费者和插件提供商在内的各独立团体组成董事会，为 Eclipse 的长期发展负责，并管理和领导 Eclipse 项目。<a href="https://www.eclipse.org/org/foundation">https://www.eclipse.org/org/foundation</a></p>
</li>
<li><p>Blender 基金会成立于 2006 年，这是一个为持续开发 Blender 而创建的非营利性组织。组织的创建是为了能雇佣 Blender 原始作者 Ton Roosendaal 全身心地投入到 Blender 的开发领导中，并维护整个软件的开发和分发工作积极有效。<a href="https://www.blender.org/about/foundation">https://www.blender.org/about/foundation</a></p>
</li>
<li><p>.NET 基金会 是一个独立的自由软件组织，其宗旨在于推进与维护微软公司开放源代码后的 .NET 框架，于2014 年，.NET 基金会由微软公司成立与赞助。<a href="https://dotnetfoundation.org">https://dotnetfoundation.org</a></p>
</li>
<li><p>云原生计算基金会 云原生计算基金会（Cloud Native Computing Foundation，简称 CNCF）成立，这是一个厂商中立的基金会，其最初的口号是坚持和整合开源技术来让编排容器作为微服务架构的一部分。<a href="https://www.cncf.io">https://www.cncf.io</a></p>
</li>
<li><p>超级账本 (Hyperledger) Hyperledger 超级账本为 Linux 基金会协作的开源项目，旨在推进跨行业区块链技术。它是一个全球跨行业领导者的合作项目，包括金融、银行、物联网、供应链、制造和技术领域。<a href="https://cn.hyperledger.org">https://cn.hyperledger.org</a></p>
</li>
<li><p>RISC-V 基金会 RISC-V 基金会创建于 2015 年，旨在推广 RISC-V 开源指令集架构。2020 年 3 月基金会总部从美国迁往位于中立国瑞士的苏黎世。目前，RISC-V International 已经与 16 个来自不同国家和地区的行业组织建立了联盟，以确保跨越国家边界和利益纠纷的平等协作。<a href="https://riscv.org">https://riscv.org</a></p>
</li>
<li><p>TARS 基金会 2020 年，Linux 基金会宣布旗下项目 TARS 正式成立 TARS 基金会。TARS 基金会 (TARS Foundation) 是 Linux 基金会旗下的一个非盈利性开源微服务基金会。<a href="https://tarscloud.org">https://tarscloud.org</a></p>
</li>
<li><p>SODA 基金会 SODA 基金会成立于 2020 年 6 月，旨在建立一个开源数据与存储自治管理的软件生态系统，是一个跨项目协作以及帮助终端用户构建解决方案的中立论坛。<a href="https://cn.sodafoundation.io">https://cn.sodafoundation.io</a></p>
</li>
<li><p>开放原子开源基金会 开放原子开源基金会 (OpenAtom Foundation) 是致力于推动全球开源产业发展的非营利机构，于 2020 年 6 月在北京成立，由阿里巴巴、百度、华为、浪潮、360、腾讯、招商银行等十家龙头科技企业联合发起。<a href="https://atomhub.org">https://atomhub.org</a></p>
</li>
<li><p>Rust 基金会 2021 年，由华为、Microsoft、Google、AWS 和 Mozilla 作为创始成员的 Rust 基金会 (Rust Foundation) 正式成立。<a href="https://foundation.rust-lang.org">https://foundation.rust-lang.org</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>网络</title>
    <url>/2022/01/24/system/%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<ul>
<li>1、网络<br><img src="/2022/01/24/system/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82.png" alt="网络分层"><span id="more"></span></li>
<li>2、各层协议</li>
</ul>
<p>应用层协议：(典型设备:应用程序,HTTP)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TELNET: 远程登录协议 tcp &lt;端口号23&gt;</span><br><span class="line">SSH: （Secure Shell ）安全外壳协议 tcp &lt;端口号22&gt;</span><br><span class="line">FTP: （File Transfer Protocol ）文件传输协议 tcp &lt;端口号20、21&gt;</span><br><span class="line">TFTP:  文件传输协议 udp &lt;端口号69&gt;</span><br><span class="line">SMTP: （Simple Mail Transfer Protocol ）简单邮件传输协议 tcp &lt;端口号25&gt; 用于发送邮件。</span><br><span class="line">POP3:  (Post Office Protocol 3) 即邮局协议的第3个版本，tcp &lt;端口号110&gt; 用于接收邮件。 </span><br><span class="line">IMAP4: (Internet Message Access Protocol 4) Internet 信息访问协议的第4版本 </span><br><span class="line">HTTP: （Hypertext Transfer Protocol）超文本传输协议 tcp &lt;端口号80&gt;</span><br><span class="line">DHCP: (Dynamic Host Configuration Protocol)动态主机分配协议，使用UDP协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配IP地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。实现即插即用联网</span><br><span class="line">BOOTP: (BOOTstrapProtocol) 是DHCP的前身，用于无盘工作站的局域网中，可以让无盘工作站从一个中心服务器上获得IP地址。通过BOOTP协议可以为局域网中的无盘工作站分配动态IP，这样就不需要管理员去为每个用户去设置静态IP地址。一个无盘系统需要下列协议才能在只读存储器中完成：BOOTP、TFTP、UDP、IP和一个局域网的驱动程序。BOOTP使用UDP，通常与TFTP协同工作</span><br><span class="line">Gopher: （The Internet Gopher Protocol ）网际Gopher协议 </span><br><span class="line">IRC: （Internet Relay Chat ）网络聊天协议 </span><br><span class="line">NNTP: (Network News Transport Protocol ）网络新闻传输协议 </span><br><span class="line">XMPP: 可扩展消息处理现场协议 </span><br><span class="line">SIP: 信令控制协议 </span><br><span class="line">SNMP: (Simple Network Management Protocol),简单网络管理协议 </span><br><span class="line">RPC: (Remote Procedure Call Protocol)（RFC- 1831）远程过程调用协议 </span><br><span class="line">RTCP: （RTP Control Protocol ）RTP控制协议 </span><br><span class="line">RTSP: (Real Time Streaming Protocol）实时流传输协议 </span><br><span class="line">TLS: (Transport Layer Security Protocol）安全传输层协议 </span><br><span class="line">SDP: (Session Description Protocol）会话描述协议 </span><br><span class="line">SOAP: （Simple Object Access Protocol）简单对象访问协议 </span><br><span class="line">GTP: 通用数据传输平台 </span><br><span class="line">STUN: (Simple Traversal of UDP over NATs，NAT的UDP简单穿越）是一种网络协议 </span><br><span class="line">NTP: （Network Time Protocol ）网络校时协议。 </span><br></pre></td></tr></table></figure>
<p>传输层协议(典型设备:进程和端口 数据单元：数据段 Segment)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TCP: （Transmission Control Protocol）传输控制协议提供可靠的面向连接的服务，传输数据前须先建立连接，结束后释放。可靠的全双工信道。可靠、有序、无丢失、不重复</span><br><span class="line">UDP: (User Datagram Protocol ）用户数据报协议发送数据前无需建立连接，不使用拥塞控制，不保证可靠交付，最大努力交付</span><br><span class="line">DCCP: （Datagram Congestion Control Protocol）数据报拥塞控制协议</span><br><span class="line">SCTP: （STREAM CONTROL TRANSMISSION PROTOCOL）流控制传输协议</span><br><span class="line">RTP: (Real-time Transport Protocol）实时传送协议 </span><br><span class="line">RSVP: （Resource ReSer Vation Protocol）资源预留协议</span><br><span class="line">PPTP: (Point to Point Tunneling Protocol）点对点隧道协议</span><br></pre></td></tr></table></figure>
<p>网络层: (典型设备:路由器，防火墙、多层交换机 数据单元：数据包 Packet) </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IP: (IPv4 · IPv6) (Internet Protocol) 网络之间互连的协议</span><br><span class="line">ARP: (Address Resolution Protocol)即地址解析协议，实现通过IP地址得知其物理地址</span><br><span class="line">RARP: (Reverse Address Resolution Protocol)反向地址转换协议允许局域网的物理机器从网关服务器的ARP表或者缓存上请求其IP地址</span><br><span class="line">ICMP: (Internet Control Message Protocol）Internet控制报文协议。它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息</span><br><span class="line">ICMPv6: （Internet Control Message Protocol version 6），即互联网控制信息协议版本六。ICMPv6为了与IPv6配套使用而开发的互联网控制信息协议。与IPv4一样，IPv6也需要使用ICMP，旧版本的ICMP不能满足IPv6全部要求，因此开发了新版本的ICMP，称为ICMPv6</span><br><span class="line">IGMP: (Internet Group Management Protocol)Internet组管理协议,是因特网协议家族中的一个组播协议，用于IP主机向任一个直接相邻的路由器报告他们的组成员情况</span><br><span class="line">RIP: (Router information protocol)路由信息协议是一种在网关与主机之间交换路由选择信息的标准</span><br><span class="line">OSPF: (Open Shortest Path Firs)开放式最短路径优先,分布式链路状态协议</span><br><span class="line">BGP: （Border Gateway Protocol）边界网关协议，用来连接Internet上独立系统的路由选择协议.采用路径向量路由选择协议</span><br><span class="line">IS-IS: （Intermediate System to Intermediate System Routing Protocol）中间系统到中间系统的路由选择协议</span><br><span class="line">IPsec: (IP Secure) &quot;Internet 协议安全性&quot;是一种开放标准的框架结构，通过使用加密的安全服务以确保在Internet协议(IP)网络上进行保密而安全的通讯</span><br></pre></td></tr></table></figure>
<p>数据链路层: (典型设备:网卡，网桥，交换机 数据单元：帧 Frame)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ARQ: （Automatic Repeat-reQuest ）自动重传请求协议，错误纠正协议之一，包括停止等待ARQ 协议和连续ARQ 协议，错误侦测、正面确认、逾时重传与负面确认继以重传等机制</span><br><span class="line">停止等待协议: （stop-and-wait）停止等待就是每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组</span><br><span class="line">CSMA/CD: (Carrrier Sense Multiple Access with Collision Detection)载波监听多点接入/碰撞检测协议。总线型网络，协议的实质是载波监听和碰撞检测。载波监听即发数据前先检测总线上是否有其他计算机在发送数据，如暂时不发数据，避免碰撞。碰撞检测为计算机边发送数据边检测信道上的信号电压大小</span><br><span class="line">PPP: (Point-to-Ponit Protocol)点对点协议面向字节，由三部分组成：一个将IP 数据报封装到串行链路的方法；一个用于建立、配置和测试数据链路连接的链路控制协议</span><br><span class="line">LCP: (Link Control Protocol)一套网络控制协议NCP</span><br><span class="line">HDLC: （High-Level Data Link Control）高级数据链路控制同步网上传输数据、面向比特的数据链路层协议</span><br><span class="line">ATM: （Asynchronous Transfer Mode ）异步传递方式，建立在电路交换和分组交换的基础上的一种面向连接的快速分组交换技术。&quot;异步&quot;是指将ATM信元&quot;异步插入:到同步的SDH比特流中。如同步插入则用户在每帧中所占的时隙相对位置固定不变。&quot;同步&quot;是指网络中各链路上的比特流都是受同一非常精确的主时钟的控制</span><br><span class="line">Wi-Fi 、WiMAX 、DTM 、令牌环、以太网、FDDI 、帧中继、 GPRS 、 EVDO 、HSPA 、L2TP 、ISDN </span><br></pre></td></tr></table></figure>
<p>物理层:(典型设备:中继器，集线器、网线、HUB, 数据单元：比特 Bit)                           </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">以太网物理层、调制解调器、PLC 、SONET/SDH 、G.709 、光导纤维、 同轴电缆、双绞线</span><br></pre></td></tr></table></figure>
<p>附<img src="/2022/01/24/system/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%9B%BE.png" alt="网络协议图"></p>
<ul>
<li>3、linux中网络命令<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig: 命令用来查看和配置网络设备</span><br><span class="line">route: 用于显示和操作IP路由表</span><br><span class="line">ping: 用来测试与目标主机的连通性</span><br><span class="line">   通过发送ICMP ECHO_REQUEST数据包到网络主机，并显示响应情况。但有些服务器为了防止通过ping探测到，通过防火墙设置了禁止ping或者在内核参数中禁止ping，这样就不能通过ping确定该主机是否还处于开启状态</span><br><span class="line">netstat: 用于显示与IP、TCP、UDP和ICMP协议相关的统计数据，一般用于检验本机各端口的网络连接情况</span><br><span class="line">ss: 是Socket Statistics的缩写。ss命令可以用来获取socket统计信息，它可以显示和netstat类似的内容。但ss的优势在于它能够显示更多更详细的有关TCP和连接状态的信息，而且比netstat更快速更高效</span><br><span class="line">telnet: 基于TELNET协议的远程登录客户端程序</span><br><span class="line">rcp: rpc不是一种安全的的传输文件的方式，rcp通过rsh（rsh见下面）来执行远程命令，要使用rcp必须经过一些配置，现在rcp已经被scp取代了，常用scp来进行文件传输</span><br><span class="line">scp: 从本地服务器复制到远程服务器或从远程服务器复制到本地</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>内容参考：<a href="https://cloud.tencent.com/developer/article/1853542">https://cloud.tencent.com/developer/article/1853542</a></p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql</title>
    <url>/2021/09/25/db/MySql/</url>
    <content><![CDATA[<ul>
<li>1、重复插入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、insert ignore</span><br><span class="line">当插入数据时，如出现错误时，如重复数据，将不返回错误，只以警告形式返回。</span><br><span class="line"></span><br><span class="line">INSERT IGNORE INTO t_test (code, name) values(1, &#x27;1&#x27;);</span><br><span class="line"></span><br><span class="line">2、on duplicate key update</span><br><span class="line">当primary or unique重复时，则执行update语句</span><br><span class="line"></span><br><span class="line">INSERT INTO t_test (code, name) VALUES (2,&#x27;1&#x27;) ON DUPLICATE KEY UPDATE name= &#x27;2&#x27;;</span><br><span class="line"> </span><br><span class="line">3、replace into</span><br><span class="line">如果存在primary or unique相同的记录，则先删除掉。再插入新记录。</span><br><span class="line"></span><br><span class="line">REPLACE INTO t_test (code, name) values(1, &#x27;3&#x27;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<span id="more"></span>

<ul>
<li>2、日期<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、DAYOFWEEK(date)</span><br><span class="line">返回日期date的星期索引(1=星期天，2=星期一, ……7=星期六)。这些索引值对应于ODBC标准。</span><br><span class="line"></span><br><span class="line">mysql&gt; select DAYOFWEEK(&#x27;1998-02-03&#x27;);</span><br><span class="line">-&gt; 3</span><br><span class="line"></span><br><span class="line">2、WEEKDAY(date)</span><br><span class="line">返回date的星期索引(0=星期一，1=星期二, ……6= 星期天)。</span><br><span class="line"></span><br><span class="line">mysql&gt; select WEEKDAY(&#x27;1997-10-04 22:23:00&#x27;);</span><br><span class="line">-&gt; 5</span><br><span class="line"></span><br><span class="line">mysql&gt; select WEEKDAY(&#x27;1997-11-05&#x27;);</span><br><span class="line">-&gt; 2</span><br><span class="line"></span><br><span class="line">3、DAYOFMONTH(date)</span><br><span class="line">返回date的月份中日期，在1到31范围内。</span><br><span class="line"></span><br><span class="line">mysql&gt; select DAYOFMONTH(&#x27;1998-02-03&#x27;);</span><br><span class="line">-&gt; 3</span><br><span class="line"></span><br><span class="line">4、DAYOFYEAR(date)</span><br><span class="line">返回date在一年中的日数, 在1到366范围内。</span><br><span class="line"></span><br><span class="line">mysql&gt; select DAYOFYEAR(&#x27;1998-02-03&#x27;);</span><br><span class="line">-&gt; 34</span><br><span class="line"></span><br><span class="line">5、MONTH(date)</span><br><span class="line">返回date的月份，范围1到12。</span><br><span class="line"></span><br><span class="line">mysql&gt; select MONTH(&#x27;1998-02-03&#x27;);</span><br><span class="line">-&gt; 2</span><br><span class="line"></span><br><span class="line">6、DAYNAME(date)</span><br><span class="line">返回date的星期名字。</span><br><span class="line"></span><br><span class="line">mysql&gt; select DAYNAME(&quot;1998-02-05&quot;);</span><br><span class="line">-&gt; &#x27;Thursday&#x27;</span><br><span class="line"></span><br><span class="line">7、MONTHNAME(date)</span><br><span class="line">返回date的月份名字。</span><br><span class="line"></span><br><span class="line">mysql&gt; select MONTHNAME(&quot;1998-02-05&quot;);</span><br><span class="line">-&gt; &#x27;February&#x27;</span><br><span class="line"></span><br><span class="line">8、QUARTER(date)</span><br><span class="line">返回date一年中的季度，范围1到4。</span><br><span class="line"></span><br><span class="line">mysql&gt; select QUARTER(&#x27;98-04-01&#x27;);</span><br><span class="line">-&gt; 2</span><br><span class="line"></span><br><span class="line">9、WEEK(date)</span><br><span class="line">WEEK(date,first)，对于星期天是一周的第一天的地方，有一个单个参数，返回date的周数，范围在0到52。2个参数形式WEEK()允许你指定星期是否开始于星期天或星期一。如果第二个参数是0，星期从星期天开始，如果第二个参数是1，从星期一开始。</span><br><span class="line"></span><br><span class="line">mysql&gt; select WEEK(&#x27;1998-02-20&#x27;);</span><br><span class="line">-&gt; 7</span><br><span class="line"></span><br><span class="line">mysql&gt; select WEEK(&#x27;1998-02-20&#x27;,0);</span><br><span class="line">-&gt; 7</span><br><span class="line"></span><br><span class="line">mysql&gt; select WEEK(&#x27;1998-02-20&#x27;,1);</span><br><span class="line">-&gt; 8</span><br><span class="line"></span><br><span class="line">10、YEAR(date)</span><br><span class="line">返回date的年份，范围在1000到9999。</span><br><span class="line"></span><br><span class="line">mysql&gt; select YEAR(&#x27;98-02-03&#x27;);</span><br><span class="line">-&gt; 1998</span><br><span class="line"></span><br><span class="line">11、HOUR(time)</span><br><span class="line">返回time的小时，范围是0到23。</span><br><span class="line"></span><br><span class="line">mysql&gt; select HOUR(&#x27;10:05:03&#x27;);</span><br><span class="line">-&gt; 10</span><br><span class="line"></span><br><span class="line">12、MINUTE(time)</span><br><span class="line">返回time的分钟，范围是0到59。</span><br><span class="line"></span><br><span class="line">mysql&gt; select MINUTE(&#x27;98-02-03 10:05:03&#x27;);</span><br><span class="line">-&gt; 5</span><br><span class="line"></span><br><span class="line">13、SECOND(time)</span><br><span class="line">回来time的秒数，范围是0到59。</span><br><span class="line"></span><br><span class="line">mysql&gt; select SECOND(&#x27;10:05:03&#x27;);</span><br><span class="line">-&gt; 3</span><br><span class="line"></span><br><span class="line">14、PERIOD_ADD(P,N)</span><br><span class="line">增加N个月到阶段P(以格式YYMM或YYYYMM)。以格式YYYYMM返回值。注意阶段参数P不是日期值。</span><br><span class="line"></span><br><span class="line">mysql&gt; select PERIOD_ADD(9801,2);</span><br><span class="line">-&gt; 199803</span><br><span class="line"></span><br><span class="line">15、PERIOD_DIFF(P1,P2)</span><br><span class="line">返回在时期P1和P2之间月数，P1和P2应该以格式YYMM或YYYYMM。注意，时期参数P1和P2不是日期值。</span><br><span class="line"></span><br><span class="line">mysql&gt; select PERIOD_DIFF(9802,199703);</span><br><span class="line">-&gt; 11</span><br><span class="line"></span><br><span class="line">16、DATE_ADD(date,INTERVAL expr type)、DATE_SUB(date,INTERVAL expr type)、ADDDATE(date,INTERVAL expr type)、SUBDATE(date,INTERVAL expr type)</span><br><span class="line">这些功能执行日期运算。对于MySQL 3.22，他们是新的。ADDDATE()和SUBDATE()是DATE_ADD()和DATE_SUB()的同义词。在MySQL 3.23中，你可以使用+和-而不是DATE_ADD()和DATE_SUB()。</span><br><span class="line">(见例子)date是一个指定开始日期的DATETIME或DATE值，expr是指定加到开始日期或从开始日期减去的间隔值一个表达式，expr是一个字符串；它可以以一个“-”开始表示负间隔。</span><br><span class="line">type是一个关键词，指明表达式应该如何被解释。EXTRACT(type FROM date)函数从日期中返回“type”间隔。下表显示了type和expr参数怎样被关联： type值 含义 期望的expr格式</span><br><span class="line">    SECOND 秒 SECONDS</span><br><span class="line">    MINUTE 分钟 MINUTES</span><br><span class="line">    HOUR 时间 HOURS</span><br><span class="line">    DAY 天 DAYS</span><br><span class="line">    MONTH 月 MONTHS</span><br><span class="line">    YEAR 年 YEARS</span><br><span class="line">    MINUTE_SECOND 分钟和秒 &quot;MINUTES:SECONDS&quot;</span><br><span class="line">    HOUR_MINUTE 小时和分钟 &quot;HOURS:MINUTES&quot;</span><br><span class="line">    DAY_HOUR 天和小时 &quot;DAYS HOURS&quot;</span><br><span class="line">    YEAR_MONTH 年和月 &quot;YEARS-MONTHS&quot;</span><br><span class="line">    HOUR_SECOND 小时, 分钟， &quot;HOURS:MINUTES:SECONDS&quot;</span><br><span class="line">    DAY_MINUTE 天, 小时, 分钟 &quot;DAYS HOURS:MINUTES&quot;</span><br><span class="line">    DAY_SECOND 天, 小时, 分钟, 秒 &quot;DAYS HOURS:MINUTES:SECONDS&quot;</span><br><span class="line">    MySQL在expr格式中允许任何标点分隔符。表示显示的是建议的分隔符。</span><br><span class="line">    如果date参数是一个DATE值并且你的计算仅仅包含YEAR、MONTH和DAY部分(即，没有时间部分)，结果是一个DATE值。否则结果是一个DATETIME值。</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT &quot;1997-12-31 23:59:59&quot; + INTERVAL 1 SECOND;</span><br><span class="line">-&gt; 1998-01-01 00:00:00</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT INTERVAL 1 DAY + &quot;1997-12-31&quot;;</span><br><span class="line">-&gt; 1998-01-01</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT &quot;1998-01-01&quot; - INTERVAL 1 SECOND;</span><br><span class="line">-&gt; 1997-12-31 23:59:59</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT DATE_ADD(&quot;1997-12-31 23:59:59&quot;,INTERVAL 1 SECOND);</span><br><span class="line">-&gt; 1998-01-01 00:00:00</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT DATE_ADD(&quot;1997-12-31 23:59:59&quot;,INTERVAL 1 DAY);</span><br><span class="line">-&gt; 1998-01-01 23:59:59</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT DATE_ADD(&quot;1997-12-31 23:59:59&quot;,INTERVAL &quot;1:1&quot; MINUTE_SECOND);</span><br><span class="line">-&gt; 1998-01-01 00:01:00</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT DATE_SUB(&quot;1998-01-01 00:00:00&quot;,INTERVAL &quot;1 1:1:1&quot; DAY_SECOND);</span><br><span class="line">-&gt; 1997-12-30 22:58:59</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT DATE_ADD(&quot;1998-01-01 00:00:00&quot;,INTERVAL &quot;-1 10&quot; DAY_HOUR);</span><br><span class="line">-&gt; 1997-12-30 14:00:00</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT DATE_SUB(&quot;1998-01-02&quot;, INTERVAL 31 DAY);</span><br><span class="line">-&gt; 1997-12-02</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT EXTRACT(YEAR FROM &quot;1999-07-02&quot;);</span><br><span class="line">-&gt; 1999</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT EXTRACT(YEAR_MONTH FROM &quot;1999-07-02 01:02:03&quot;);</span><br><span class="line">-&gt; 199907</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT EXTRACT(DAY_MINUTE FROM &quot;1999-07-02 01:02:03&quot;);</span><br><span class="line">-&gt; 20102</span><br><span class="line"></span><br><span class="line">    如果你指定太短的间隔值(不包括type关键词期望的间隔部分)，MySQL假设你省掉了间隔值的最左面部分。例如，</span><br><span class="line">    如果你指定一个type是DAY_SECOND，值expr被希望有天、小时、分钟和秒部分。如果你象&quot;1:10&quot;这样指定值，</span><br><span class="line">    MySQL假设日子和小时部分是丢失的并且值代表分钟和秒。换句话说，&quot;1:10&quot; DAY_SECOND以它等价于&quot;1:10&quot; MINUTE_SECOND</span><br><span class="line">    的方式解释，这对那MySQL解释TIME值表示经过的时间而非作为一天的时间的方式有二义性。如果你使用确实不正确的日期，</span><br><span class="line">    结果是NULL。如果你增加MONTH、YEAR_MONTH或YEAR并且结果日期大于新月份的最大值天数，日子在新月用最大的天调整。</span><br><span class="line"></span><br><span class="line">mysql&gt; select DATE_ADD(&#x27;1998-01-30&#x27;, Interval 1 month);</span><br><span class="line">-&gt; 1998-02-28</span><br><span class="line">注意，从前面的例子中词INTERVAL和type关键词不是区分大小写的。</span><br><span class="line"></span><br><span class="line">17、TO_DAYS(date)</span><br><span class="line">给出一个日期date，返回一个天数(从0年的天数)。</span><br><span class="line"></span><br><span class="line">mysql&gt; select TO_DAYS(950501);</span><br><span class="line">-&gt; 728779</span><br><span class="line"></span><br><span class="line">mysql&gt; select TO_DAYS(&#x27;1997-10-07&#x27;);</span><br><span class="line">-&gt; 729669</span><br><span class="line"></span><br><span class="line">TO_DAYS()不打算用于使用格列高里历(1582)出现前的值。</span><br><span class="line"></span><br><span class="line">18、FROM_DAYS(N)</span><br><span class="line">给出一个天数N，返回一个DATE值。</span><br><span class="line"></span><br><span class="line">mysql&gt; select FROM_DAYS(729669);</span><br><span class="line">-&gt; &#x27;1997-10-07&#x27;</span><br><span class="line"></span><br><span class="line">TO_DAYS()不打算用于使用格列高里历(1582)出现前的值。</span><br><span class="line"></span><br><span class="line">19、DATE_FORMAT(date,format)</span><br><span class="line">根据format字符串格式化date值。下列修饰符可以被用在format字符串中： %M 月名字(January……December)</span><br><span class="line"></span><br><span class="line">    %W 星期名字(Sunday……Saturday)</span><br><span class="line">    %D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。)</span><br><span class="line">    %Y 年, 数字, 4 位</span><br><span class="line">    %y 年, 数字, 2 位</span><br><span class="line">    %a 缩写的星期名字(Sun……Sat)</span><br><span class="line">    %d 月份中的天数, 数字(00……31)</span><br><span class="line">    %e 月份中的天数, 数字(0……31)</span><br><span class="line">    %m 月, 数字(01……12)</span><br><span class="line">    %c 月, 数字(1……12)</span><br><span class="line">    %b 缩写的月份名字(Jan……Dec)</span><br><span class="line">    %j 一年中的天数(001……366)</span><br><span class="line">    %H 小时(00……23)</span><br><span class="line">    %k 小时(0……23)</span><br><span class="line">    %h 小时(01……12)</span><br><span class="line">    %I 小时(01……12)</span><br><span class="line">    %l 小时(1……12)</span><br><span class="line">    %i 分钟, 数字(00……59)</span><br><span class="line">    %r 时间,12 小时(hh:mm:ss [AP]M)</span><br><span class="line">    %T 时间,24 小时(hh:mm:ss)</span><br><span class="line">    %S 秒(00……59)</span><br><span class="line">    %s 秒(00……59)</span><br><span class="line">    %p AM或PM</span><br><span class="line">    %w 一个星期中的天数(0=Sunday ……6=Saturday )</span><br><span class="line">    %U 星期(0……52), 这里星期天是星期的第一天</span><br><span class="line">    %u 星期(0……52), 这里星期一是星期的第一天</span><br><span class="line">    %% 一个文字“%”。</span><br><span class="line">    所有的其他字符不做解释被复制到结果中。</span><br><span class="line"></span><br><span class="line">mysql&gt; select DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;, &#x27;%W %M %Y&#x27;);</span><br><span class="line">-&gt; &#x27;Saturday October 1997&#x27;</span><br><span class="line"></span><br><span class="line">mysql&gt; select DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;, &#x27;%H:%i:%s&#x27;);</span><br><span class="line">-&gt; &#x27;22:23:00&#x27;</span><br><span class="line"></span><br><span class="line">mysql&gt; select DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;,&#x27;%D %y %a %d %m %b %j&#x27;);</span><br><span class="line">-&gt; &#x27;4th 97 Sat 04 10 Oct 277&#x27;</span><br><span class="line"></span><br><span class="line">mysql&gt; select DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;,&#x27;%H %k %I %r %T %S %w&#x27;);</span><br><span class="line"></span><br><span class="line">-&gt; &#x27;22 22 10 10:23:00 PM 22:23:00 00 6&#x27;</span><br><span class="line"></span><br><span class="line">MySQL3.23中，在格式修饰符字符前需要%。在MySQL更早的版本中，%是可选的。</span><br><span class="line"></span><br><span class="line">20、TIME_FORMAT(time,format)</span><br><span class="line">这象上面的DATE_FORMAT()函数一样使用，但是format字符串只能包含处理小时、分钟和秒的那些格式修饰符。其他修饰符产生一个NULL值或0。</span><br><span class="line"></span><br><span class="line">21、CURDATE()、CURRENT_DATE</span><br><span class="line">以&#x27;YYYY-MM-DD&#x27;或YYYYMMDD格式返回今天日期值，取决于函数是在一个字符串还是数字上下文被使用。</span><br><span class="line"></span><br><span class="line">mysql&gt; select CURDATE();</span><br><span class="line">-&gt; &#x27;1997-12-15&#x27;</span><br><span class="line"></span><br><span class="line">mysql&gt; select CURDATE() + 0;</span><br><span class="line">-&gt; 19971215</span><br><span class="line"></span><br><span class="line">22、CURTIME()、CURRENT_TIME</span><br><span class="line">以&#x27;HH:MM:SS&#x27;或HHMMSS格式返回当前时间值，取决于函数是在一个字符串还是在数字的上下文被使用。</span><br><span class="line"></span><br><span class="line">mysql&gt; select CURTIME();</span><br><span class="line">-&gt; &#x27;23:50:26&#x27;</span><br><span class="line"></span><br><span class="line">mysql&gt; select CURTIME() + 0;</span><br><span class="line">-&gt; 235026</span><br><span class="line"></span><br><span class="line">23、NOW()、SYSDATE()、CURRENT_TIMESTAMP</span><br><span class="line">以&#x27;YYYY-MM-DD HH:MM:SS&#x27;或YYYYMMDDHHMMSS格式返回当前的日期和时间，取决于函数是在一个字符串还是在数字的上下文被使用。</span><br><span class="line"></span><br><span class="line">mysql&gt; select NOW();</span><br><span class="line">-&gt; &#x27;1997-12-15 23:50:26&#x27;</span><br><span class="line"></span><br><span class="line">mysql&gt; select NOW() + 0;</span><br><span class="line">-&gt; 19971215235026</span><br><span class="line"></span><br><span class="line">24、UNIX_TIMESTAMP()、UNIX_TIMESTAMP(date)</span><br><span class="line">如果没有参数调用，返回一个Unix时间戳记(从&#x27;1970-01-01 00:00:00&#x27;GMT开始的秒数)。如果UNIX_TIMESTAMP()用一个date参数被调用，它返回从&#x27;1970-01-01 00:00:00&#x27; GMT开始的秒数值。</span><br><span class="line">date可以是一个DATE字符串、一个DATETIME字符串、一个TIMESTAMP或以YYMMDD或YYYYMMDD格式的本地时间的一个数字。</span><br><span class="line"></span><br><span class="line">mysql&gt; select UNIX_TIMESTAMP();</span><br><span class="line">-&gt; 882226357</span><br><span class="line"></span><br><span class="line">mysql&gt; select UNIX_TIMESTAMP(&#x27;1997-10-04 22:23:00&#x27;);</span><br><span class="line">-&gt; 875996580</span><br><span class="line"></span><br><span class="line">当UNIX_TIMESTAMP被用于一个TIMESTAMP列，函数将直接接受值，没有隐含的“string-to-unix-timestamp”变换。</span><br><span class="line"></span><br><span class="line">25、FROM_UNIXTIME(unix_timestamp)</span><br><span class="line">以&#x27;YYYY-MM-DD HH:MM:SS&#x27;或YYYYMMDDHHMMSS格式返回unix_timestamp参数所表示的值，取决于函数是在一个字符串还是或数字上下文中被使用。</span><br><span class="line"></span><br><span class="line">mysql&gt; select FROM_UNIXTIME(875996580);</span><br><span class="line">-&gt; &#x27;1997-10-04 22:23:00&#x27;</span><br><span class="line"></span><br><span class="line">mysql&gt; select FROM_UNIXTIME(875996580) + 0;</span><br><span class="line">-&gt; 19971004222300</span><br><span class="line"></span><br><span class="line">26、FROM_UNIXTIME(unix_timestamp,format)</span><br><span class="line">返回表示 Unix 时间标记的一个字符串，根据format字符串格式化。format可以包含与DATE_FORMAT()函数列出的条目同样的修饰符。</span><br><span class="line"></span><br><span class="line">mysql&gt; select FROM_UNIXTIME(UNIX_TIMESTAMP(),&#x27;%Y %D %M %h:%i:%s %x&#x27;);</span><br><span class="line">-&gt; &#x27;1997 23rd December 03:43:30 x&#x27;</span><br><span class="line"></span><br><span class="line">27、SEC_TO_TIME(seconds)</span><br><span class="line">返回seconds参数，变换成小时、分钟和秒，值以&#x27;HH:MM:SS&#x27;或HHMMSS格式化，取决于函数是在一个字符串还是在数字上下文中被使用。</span><br><span class="line"></span><br><span class="line">mysql&gt; select SEC_TO_TIME(2378);</span><br><span class="line">-&gt; &#x27;00:39:38&#x27;</span><br><span class="line"></span><br><span class="line">mysql&gt; select SEC_TO_TIME(2378) + 0;</span><br><span class="line">-&gt; 3938</span><br><span class="line"></span><br><span class="line">28、TIME_TO_SEC(time)</span><br><span class="line">返回time参数，转换成秒。</span><br><span class="line"></span><br><span class="line">mysql&gt; select TIME_TO_SEC(&#x27;22:23:00&#x27;);</span><br><span class="line">-&gt; 80580</span><br><span class="line"></span><br><span class="line">mysql&gt; select TIME_TO_SEC(&#x27;00:39:38&#x27;);</span><br><span class="line">-&gt; 2378</span><br><span class="line"></span><br><span class="line">原文链接：https://blog.csdn.net/weixin_33488806/article/details/113225769</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ps：</span><br><span class="line">今天, SELECT * FROM 表名 WHERE TO_DAYS(时间字段名) = to_days(now())</span><br><span class="line">昨天, SELECT * FROM 表名 WHERE TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) &lt;= 1</span><br><span class="line">7天, SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= date(时间字段名)</span><br><span class="line">近30天, SELECT * FROM 表名 where DATE_SUB(CURDATE(), INTERVAL 30 DAY) &lt;= date(时间字段名)</span><br><span class="line">本月, SELECT * FROM 表名 WHERE DATE_FORMAT( 时间字段名, &#x27;%Y%m&#x27; ) = DATE_FORMAT( CURDATE( ) , &#x27;%Y%m&#x27; )</span><br><span class="line">上一月, SELECT * FROM 表名 WHERE PERIOD_DIFF( date_format( now( ) , &#x27;%Y%m&#x27; ) , date_format( 时间字段名, &#x27;%Y%m&#x27; ) ) =1</span><br><span class="line"></span><br><span class="line">原文链接：https://blog.csdn.net/weixin_29175469/article/details/113344471</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>自行颁发SSL证书</title>
    <url>/2021/08/31/tool/%E8%87%AA%E8%A1%8C%E9%A2%81%E5%8F%91SSL%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<ul>
<li><p>1、生成一个RSA密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl genrsa -des3 -out dev.key 1024</span><br></pre></td></tr></table></figure>
</li>
<li><p>2、生成一个证书请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl req -new -key dev.key -out dev.csr</span><br></pre></td></tr></table></figure>
</li>
<li><p>3、自己签发证书</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -days 365 -in dev.csr -signkey dev.key -out dev.crt</span><br></pre></td></tr></table></figure>
</li>
<li><p>4、拷贝一个不需要输入密码的密钥文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl rsa -in dev.key -out dev_nopass.key</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">生成证书时，直接回车，注意Common Name 设置域名</span><br><span class="line"></span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:BeiJing</span><br><span class="line">Locality Name (eg, city) [Default City]:BeiJing</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:upcwxiao</span><br><span class="line">Common Name (eg, your name or your server&#x27;s hostname) []: *.myhost.com</span><br><span class="line">Email Address []:xxx@163.com</span><br></pre></td></tr></table></figure>
<ul>
<li>5、nginx 配置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen 443 ssl; #监听端口</span><br><span class="line">   server_name xxx.myhost.com; #请求域名</span><br><span class="line">   ssl_certificate /etc/nginx/cert/dev.crt; # 公钥</span><br><span class="line">   ssl_certificate_key /etc/nginx/cert/dev_nopass.key;</span><br><span class="line">   ssl_session_timeout     5m; #会话超时时间</span><br><span class="line">   ssl_ciphers     ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; #加密算法</span><br><span class="line">   ssl_protocols   TLSv1 TLSv1.1 TLSv1.2; #SSL协议</span><br><span class="line"></span><br><span class="line">   access_log /var/log/nginx/xxx.access.log;</span><br><span class="line">   error_log /var/log/nginx/xxx.error.log;</span><br><span class="line"></span><br><span class="line">   # 将所有请求转发给 server 的应用处理</span><br><span class="line">   location / &#123;</span><br><span class="line">       proxy_http_version 1.1; #代理使用的http协议</span><br><span class="line">       proxy_set_header Host $host; #header添加请求host信息</span><br><span class="line">       proxy_set_header X-Real-IP $remote_addr; # header增加请求来源IP信息</span><br><span class="line">       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # 增加代理记录</span><br><span class="line">       proxy_pass http://127.0.0.1:10234;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>辅助工具</category>
      </categories>
      <tags>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>限流</title>
    <url>/2021/08/10/language/%E9%99%90%E6%B5%81/</url>
    <content><![CDATA[<ul>
<li>1、限流分类<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、合法性验证限流：比如验证码、IP 黑名单等，这些手段可以有效的防止恶意攻击和爬虫采集</span><br><span class="line">2、容器限流：如 Tomcat、Nginx 等，其中 Tomcat 可以设置最大线程数（maxThreads），当并发超过最大线程数会排队等待执行；而 Nginx 提供了两种限流手段：一是控制速率，二是控制并发连接数</span><br><span class="line">3、服务端限流：如我们在服务器端通过限流算法实现限流</span><br></pre></td></tr></table></figure></li>
<li>2、Tomcat限流<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Tomcat 8.5 版本的最大线程数在 conf/server.xml 配置中</span><br><span class="line"></span><br><span class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; connectionTimeout=&quot;20000&quot; maxThreads=&quot;150&quot;   redirectPort=&quot;8443&quot; /&gt;</span><br><span class="line"></span><br><span class="line">其中 maxThreads 就是 Tomcat 的最大线程数，当请求的并发大于此值（maxThreads）时，请求就会排队执行，这样就完成了限流的目的</span><br><span class="line"></span><br><span class="line">maxThreads 的值可以适当的调大一些，此值默认为 150（Tomcat 版本 8.5.42），但这个值也不是越大越好，要看具体的硬件配置，需要注意的是每开启一个线程需要耗用 1MB 的 JVM 内存空间用于作为线程栈之用，并且线程越多 GC 的负担也越重。最后需要注意一下，操作系统对于进程中的线程数有一定的限制，Windows 每个进程中的线程数不允许超过 2000，Linux 每个进程中的线程数不允许超过 1000</span><br></pre></td></tr></table></figure></li>
<li>3、Nginx 限流<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">控制速率</span><br><span class="line"></span><br><span class="line">我们需要使用 limit_req_zone 用来限制单位时间内的请求数，即速率限制，示例配置如下：</span><br><span class="line">limit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;</span><br><span class="line">server &#123; </span><br><span class="line">    location / &#123; </span><br><span class="line">        limit_req zone=mylimit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">以上配置表示，限制每个 IP 访问的速度为 2r/s，因为 Nginx 的限流统计是基于毫秒的，我们设置的速度是 2r/s，转换一下就是 500ms 内单个 IP 只允许通过 1 个请求，从 501ms 开始才允许通过第 2 个请求</span><br></pre></td></tr></table></figure>
<img src="/2021/08/10/language/%E9%99%90%E6%B5%81/1.png" alt="1"><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">速率限制升级版</span><br><span class="line"></span><br><span class="line">上面的速率控制虽然很精准但是应用于真实环境未免太苛刻了，真实情况下我们应该控制一个 IP 单位总时间内的总访问次数，而不是像上面那么精确但毫秒，我们可以使用 burst 关键字开启此设置，示例配置如下：</span><br><span class="line"></span><br><span class="line">limit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;</span><br><span class="line">server &#123; </span><br><span class="line">    location / &#123; </span><br><span class="line">        limit_req zone=mylimit burst=4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">burst=4 表示每个 IP 最多允许4个突发请求，如单个 IP 在 10ms 内发送 10 次请求的结果如下,从结果可以看出，有 1 个请求被立即处理了，4 个请求被放到 burst 队列里排队执行了，另外 5 个请求被拒绝了</span><br></pre></td></tr></table></figure>
<img src="/2021/08/10/language/%E9%99%90%E6%B5%81/2.png" alt="2"><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">控制并发数</span><br><span class="line"></span><br><span class="line">利用 limit_conn_zone 和 limit_conn 两个指令即可控制并发数，示例配置如下：</span><br><span class="line">limit_conn_zone $binary_remote_addr zone=perip:10m;</span><br><span class="line">limit_conn_zone $server_name zone=perserver:10m;</span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    limit_conn perip 10;</span><br><span class="line">    limit_conn perserver 100;</span><br><span class="line">&#125;</span><br><span class="line">其中 limit_conn perip 10 表示限制单个 IP 同时最多能持有 10 个连接；limit_conn perserver 100 表示 server 同时能处理并发连接的总数为 100 个</span><br><span class="line">只有当 request header 被后端处理后，这个连接才进行计数</span><br></pre></td></tr></table></figure></li>
<li>4、服务端 限流<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">时间窗口算法</span><br><span class="line">漏桶算法</span><br><span class="line">令牌算法</span><br><span class="line"></span><br><span class="line">时间窗口算法（计算器限流）,可以结合redis实现，可参考：https://www.cnblogs.com/carrychan/p/9435979.html</span><br><span class="line"></span><br><span class="line">漏桶算法可以使用 Redis 4.0 版本中提供的 Redis-Cell 模块，也可以结合redis实现</span><br><span class="line">Redis-Cell 实现限流的方法也很简单，只需要使用一条指令 cl.throttle 即可</span><br><span class="line">&gt; cl.throttle mylimit 15 30 60</span><br><span class="line">1）（integer）0 # 0 表示获取成功，1 表示拒绝</span><br><span class="line">2）（integer）15 # 漏斗容量</span><br><span class="line">3）（integer）14 # 漏斗剩余容量</span><br><span class="line">4）（integer）-1 # 被拒绝之后，多长时间之后再试（单位：秒）-1 表示无需重试</span><br><span class="line">5）（integer）2 # 多久之后漏斗完全空出来</span><br><span class="line">其中 15 为漏斗的容量，30 / 60s 为漏斗的速率</span><br><span class="line"></span><br><span class="line">令牌算法</span><br><span class="line">可以使用Google 开源的 guava 包，不过只针对单机，分布式环境还是需要结合redis实现</span><br><span class="line"></span><br></pre></td></tr></table></figure>
内容参考：<a href="https://zhuanlan.zhihu.com/p/141733902">https://zhuanlan.zhihu.com/p/141733902</a></li>
</ul>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo添加图片</title>
    <url>/2021/02/10/hexo/hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h1 id="1、安装图片路径转换插件"><a href="#1、安装图片路径转换插件" class="headerlink" title="1、安装图片路径转换插件"></a>1、安装图片路径转换插件</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="2、修改插件bug"><a href="#2、修改插件bug" class="headerlink" title="2、修改插件bug"></a>2、修改插件bug</h1><ul>
<li><p>打开/node_modules/hexo-asset-image/index.js</p>
</li>
<li><p>将内容替换为下面：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    	<span class="keyword">var</span> link = data.permalink;</span><br><span class="line">	<span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	   <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">	<span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        <span class="attr">ignoreWhitespace</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">xmlMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">lowerCaseTags</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">decodeEntities</span>: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">			<span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">			<span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			<span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">			   !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">			  <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">			  <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">			  <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">				<span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">			  &#125;);</span><br><span class="line">			  <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">				srcArray.shift();</span><br><span class="line">			  src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">			  $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">			  <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">			<span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">		&#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="3、打开-config-yml"><a href="#3、打开-config-yml" class="headerlink" title="3、打开_config.yml"></a>3、打开_config.yml</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>常用软件</title>
    <url>/2021/01/04/tool/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">软件</th>
<th align="center">用途</th>
<th align="center">系统</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Sequel Pro</td>
<td align="center">mysql客户端</td>
<td align="center">mac</td>
</tr>
<tr>
<td align="center">Workbench</td>
<td align="center">mysql客户端</td>
<td align="center">linux、windows</td>
</tr>
<tr>
<td align="center">Navicate</td>
<td align="center">mysql客户端</td>
<td align="center">mac、windows</td>
</tr>
<tr>
<td align="center">Another Redis DeskTop Manager</td>
<td align="center">redis客户端</td>
<td align="center">mac、linux、windows</td>
</tr>
<tr>
<td align="center">ZOC</td>
<td align="center">ssh，上传、下载</td>
<td align="center">mac、windows</td>
</tr>
<tr>
<td align="center">Talend API Tester</td>
<td align="center">chrome插件，类似postman</td>
<td align="center">chrome</td>
</tr>
<tr>
<td align="center">JuiceSSH</td>
<td align="center">android ssh</td>
<td align="center">android</td>
</tr>
<tr>
<td align="center">Mounty</td>
<td align="center">读写NTFS格式磁盘</td>
<td align="center">mac</td>
</tr>
<tr>
<td align="center">Typora</td>
<td align="center">markdown编辑器，可与PicGo搭配使用</td>
<td align="center">mac、linux、windows</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>辅助工具</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2021/01/01/tool/Git/</url>
    <content><![CDATA[<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>Git：<a href="http://git-scm.com/">http://git-scm.com/</a></p>
<p>windows版下载地址：<a href="https://git-for-windows.github.io/">https://git-for-windows.github.io/</a></p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>1、创建版本库： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>2、提交代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add file1.txt</span><br><span class="line">git commit -m &quot;提交代码&quot;</span><br></pre></td></tr></table></figure>
<p>3、查看代码状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>4、查看修改内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git diff file1.txt</span><br></pre></td></tr></table></figure>
<p>5、版本回退：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^（当前版本）</span><br><span class="line">或</span><br><span class="line">git reset --hard 版本ID</span><br></pre></td></tr></table></figure>
<p>6、查看日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line">或</span><br><span class="line">git reflog</span><br></pre></td></tr></table></figure>
<p>7、撤销修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -- file</span><br></pre></td></tr></table></figure>
<p>8、撤销暂存区修改内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset HEAD file</span><br></pre></td></tr></table></figure>
<p>9、创建分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout -b dev</span><br><span class="line">或</span><br><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure>
<p>10、合并分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git merge dev</span><br></pre></td></tr></table></figure>
<p>11、分支的一些操作分支：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看分支：git branch</span><br><span class="line">创建分支：git branch</span><br><span class="line">切换分支：git checkout</span><br><span class="line">创建+切换分支：git checkout -b</span><br><span class="line">合并某分支到当前分支：git merge</span><br><span class="line">删除分支：git branch -d</span><br></pre></td></tr></table></figure>
<p>12、分支的一些处理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看远程库信息：git remote -v；</span><br><span class="line">从本地推送分支：git push origin branch-name（如果推送失败，先用git pull抓取远程的新提交）；</span><br><span class="line">在本地创建和远程分支对应的分支：git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</span><br><span class="line">建立本地分支和远程分支的关联：git branch --set-upstream branch-name origin/branch-name；</span><br><span class="line">从远程抓取分支：git pull，如果有冲突，要先处理冲突。</span><br></pre></td></tr></table></figure>
<h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><p>在windows下还可以安装 tortoiseGit (这个也是大多数人推荐的，可以直接解决乱码问题。)。提交代码也做了些许的改变，更接近tortoisesvn了。其中的功能如果对git有了解的话看一眼应该就能猜到作用了。</p>
<p>下载地址:<a href="http://tortoisegit.org/">http://tortoisegit.org/</a></p>
<p>Git乱码问题：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1, /etc/gitconfig：</span><br><span class="line">[gui]</span><br><span class="line">encoding = utf-8 #代码库统一用urf-8,在git gui中可以正常显示中文</span><br><span class="line">[i18n]</span><br><span class="line">commitencoding = GB2312 #log编码，window下默认gb2312,声明后发到服务器才不会乱码</span><br><span class="line">[svn]</span><br><span class="line">pathnameencoding = GB2312 #支持中文路径</span><br><span class="line">注意此处的GB2312</span><br><span class="line"></span><br><span class="line">2, /etc/git-completion.bash:</span><br><span class="line">alias ls=&#x27;ls --show-control-chars --color=auto&#x27; #ls能够正常显示中文</span><br><span class="line"></span><br><span class="line">3, /etc/inputrc:</span><br><span class="line">set output-meta on #bash中可以正常输入中文</span><br><span class="line"></span><br><span class="line">set convert-meta off</span><br><span class="line"></span><br><span class="line">4, /etc/profile:</span><br><span class="line">export LESSHARSET=utf-8 # 命令不像其它一样，条从头滚到底，它会恰当地停在第一页，按键再往后翻页。这是通过将送给处理实现的。以上即是设置的字符编码，使得git log可以正常显示中文。</span><br><span class="line"></span><br><span class="line">上述gb2312如果还不行，可以改为gbk，试一下。</span><br></pre></td></tr></table></figure>

<p>git官方文档：<a href="http://git-scm.com/book/zh/v2">http://git-scm.com/book/zh/v2</a></p>
<p>这篇文章简单而又全面的讲解了git的使用。</p>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>
]]></content>
      <categories>
        <category>辅助工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax</title>
    <url>/2021/01/01/language/Ajax/</url>
    <content><![CDATA[<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。<br>在应用时主要是创建XMLHttpRequest对象，调用指定服务地址。<br>但是IE中各个版本支持的不太一样,所以在创建次对象时可能要特殊处理下。<br>一般如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function createXMLHttpRequest() &#123;</span><br><span class="line">    var xmlhttp;</span><br><span class="line">    try &#123;</span><br><span class="line">        xmlhttp = new XMLHttpRequest(); //ie7及以上，其他浏览器   </span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            xmlhttp = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;); //ie6     </span><br><span class="line">        &#125; catch (e) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                xmlhttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); //ie6以下    </span><br><span class="line">            &#125; catch (e) &#123;</span><br><span class="line">                throw &quot;创建AJAX对象失败！&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return xmlhttp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var xmlhttp = createXMLHttpRequest();</span><br><span class="line">xmlhttp.open(&quot;GET&quot;, &quot;http://localhost:8080/SimpleBlog/AjaxTest&quot;, true);</span><br><span class="line">xmlhttp.send(null);</span><br><span class="line">xmlhttp.onreadystatechange = function (result) &#123;</span><br><span class="line">    if (xmlhttp.readyState == 4 &amp;&amp; xmlhttp.status == 200) &#123;</span><br><span class="line">        alter(result.test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>但是浏览器再执行javascript代码时，有个著名的同源策略，这使得跨域请求就不是那么方便了。<br>那一般都是用什么方式支持跨域呢？<br>1、通过中间代理服务器，获取要跨域请求的数据。<br>2、通过iframe内嵌带请求域的页面，来解决跨域访问问题。<br>3、通过jsonp方式。<br>4、不过现在已经提出了XMLHttpRequest Level2(XHR2)允许跨域请求，不过要在server的返回头中显示声明允许跨域请求（浏览器的支持情况：<a href="http://caniuse.com/#feat=xhr2）。">http://caniuse.com/#feat=xhr2）。</a></p>
<p>下面简单说下jsonp与xtr2。</p>
<h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>jsonp简单的说就是利用script标签来实现跨域请求的调用，因为浏览器中脚本的加载是不受同源策略影响的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function get() &#123;</span><br><span class="line">    var url = &#x27;http: //localhost:8080/SimpleBlog/AjaxTest?callback=callback&#x27;;   </span><br><span class="line">    var script = document.createElement(&#x27;script&#x27;);</span><br><span class="line">    script.setAttribute(&quot;type&quot;, &quot;text/javascript&quot;);</span><br><span class="line">    script.src = url;</span><br><span class="line">    document.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function callback(va) &#123;</span><br><span class="line">    alert(va.test);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务端（java）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">boolean jsonP = false;</span><br><span class="line">String cb = this.request.getParameter(&quot;callback&quot;);</span><br><span class="line">if (cb != null) &#123;</span><br><span class="line">    jsonP = true;</span><br><span class="line">    response.setContentType(&quot;text/javascript&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    response.setContentType(&quot;application/x-json&quot;);</span><br><span class="line">&#125;</span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">if (jsonP) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        out.println(cb + &quot;(&#123;&quot;test &quot;:&quot;1&quot;&#125;)&quot;);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就可以实现跨域调用了。</p>
<p>而我们经常用的jquery已经实现了此类方式的封装，使用起来更简单。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$(document).ready(function () &#123;</span><br><span class="line">  $(&#x27;#jqueryajax &#x27;).bind(&#x27;click&#x27;, function () &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      type: &#x27;&#x27;</span><br><span class="line">      get &#x27;&#x27;,</span><br><span class="line">      async: false,</span><br><span class="line">      url: &#x27;&#x27;</span><br><span class="line">      http: &#x27;localhost:8080/SimpleBlog/AjaxTest1&#x27;,</span><br><span class="line">      dataType: &#x27;jsonp&#x27;,</span><br><span class="line">      jsonp: &#x27;callback&#x27;,</span><br><span class="line">      success: function (json) &#123;</span><br><span class="line">          alert(json.result);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: function () &#123;</span><br><span class="line">          alert(&#x27;fail&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>服务端（java）： 我用了struts是这样写的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class AjaxTest1 extends ActionSupport &#123;</span><br><span class="line"></span><br><span class="line">  private String result;</span><br><span class="line">  public String getResult() &#123;</span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public String execute() &#123;</span><br><span class="line"></span><br><span class="line">    this.result = &quot;1&quot;;</span><br><span class="line">    return &quot;jqueryajax&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="xtr2："><a href="#xtr2：" class="headerlink" title="xtr2："></a>xtr2：</h3><p>这个就更简单了,直接创建调用即可。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function createCORSRequest(method, url) &#123;</span><br><span class="line">  var xhr = new XMLHttpRequest();</span><br><span class="line">  if (&#x27;withCredentials&#x27; in xhr) &#123;</span><br><span class="line">    xhr.open(method, url, true);</span><br><span class="line">  &#125; else if (typeof XDomainRequest != &#x27;undefined&#x27;) &#123;</span><br><span class="line">    xhr = new XDomainRequest();</span><br><span class="line">    xhr.open(method, url);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    xhr = null;</span><br><span class="line">  &#125;</span><br><span class="line">  return xhr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function xhr2() &#123;</span><br><span class="line">  var request = createCORSRequest(&#x27;GET&#x27;, &#x27;http: //localhost:8080/SimpleBlog/AjaxTest1&#x27;);</span><br><span class="line">  if (request) &#123;</span><br><span class="line">    request.onload = function () &#123;</span><br><span class="line">      alert(request.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">    request.onerror = function (e) &#123;</span><br><span class="line">      alert(&#x27;error&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    request.send();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>其实只要在返回response中设置 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">httpResponse.addHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;); </span><br></pre></td></tr></table></figure>
<p>即可。</p>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>重置样式</title>
    <url>/2021/01/01/language/%E9%87%8D%E7%BD%AE%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<p>css 重置样式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html &#123;</span><br><span class="line">	overflow-x: auto;</span><br><span class="line">	overflow-y: scroll;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body, dl, dt, dd, ul, ol, li, pre, form, fieldset, input, p, blockquote, th, td &#123;</span><br><span class="line">	font-weight: 400;</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1, h2, h3, h4, h4, h5 &#123;</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">	background-color: #FFFFFF;</span><br><span class="line">	color: #666666;</span><br><span class="line">	font-family: Helvetica,Arial,sans-serif;</span><br><span class="line">	font-size: 12px;</span><br><span class="line">	padding: 0 10px;</span><br><span class="line">	text-align: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">select &#123;</span><br><span class="line">	font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table &#123;</span><br><span class="line">	border-collapse: collapse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fieldset, img &#123;</span><br><span class="line">	border: 0 none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fieldset &#123;</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fieldset p &#123;</span><br><span class="line">	margin: 0;</span><br><span class="line">	padding: 0 0 0 8px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">legend &#123;</span><br><span class="line">	display: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">address, caption, em, strong, th, i &#123;</span><br><span class="line">	font-style: normal;</span><br><span class="line">	font-weight: 400;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">table caption &#123;</span><br><span class="line">	margin-left: -1px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hr &#123;</span><br><span class="line">	border-bottom: 1px solid #FFFFFF;</span><br><span class="line">	border-top: 1px solid #E4E4E4;</span><br><span class="line">	border-width: 1px 0;</span><br><span class="line">	clear: both;</span><br><span class="line">	height: 2px;</span><br><span class="line">	margin: 5px 0;</span><br><span class="line">	overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ol, ul &#123;</span><br><span class="line">	list-style-image: none;</span><br><span class="line">	list-style-position: outside;</span><br><span class="line">	list-style-type: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">caption, th &#123;</span><br><span class="line">	text-align: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">q:before, q:after, blockquote:before, blockquote:after &#123;</span><br><span class="line">	content: &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>Hbase</title>
    <url>/2021/01/01/db/Hbase/</url>
    <content><![CDATA[<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>从 Hbase 官网下载页面下载安装包, 然后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar xfz hbase-0.94.2.tar.gz</span><br><span class="line">cd hbase-0.94.2</span><br><span class="line">chmod ugo+x ./bin/*.sh</span><br><span class="line">注意, 要修改 bin/ 目录下的脚本的的权限, 不然启动出错。</span><br></pre></td></tr></table></figure>
<h3 id="配置-hbase-env-sh-和-hbase-default-xml"><a href="#配置-hbase-env-sh-和-hbase-default-xml" class="headerlink" title="配置 hbase-env.sh 和 hbase-default.xml"></a>配置 hbase-env.sh 和 hbase-default.xml</h3><p>两个配置文件中的一个 hbase-env.sh 已经存在于 conf/ 目录下, 但 hbase-default.xml 并不在 conf/ 目录, 需要从 ./src/main/resources/ 目录拷贝：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp ./src/main/resources/hbase-default.xml ./conf/</span><br><span class="line"></span><br><span class="line">修改 hbase-env.sh 的如下几个地方：</span><br><span class="line">export JAVA_HOME=/home/wx/software/jdk1.7.0/</span><br><span class="line">export HBASE_CLASSPATH=/home/wx/software/hbase-0.94.2/lib/</span><br><span class="line">export HBASE_PID_DIR=$&#123;HBASE_HOME&#125;/tmp</span><br><span class="line">export HBASE_IDENT_STRING=my</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>修改 hbase-default.xml 的如下几个地方：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hbase.rootdir /home/work/software/hbase-0.94.2/data</span><br><span class="line">hbase.tmp.dir /home/work/software/hbase-0.94.2/tmp</span><br><span class="line">hbase.defaults.for.version 0.94.2 </span><br></pre></td></tr></table></figure>
<h3 id="启动和停止-HBase："><a href="#启动和停止-HBase：" class="headerlink" title="启动和停止 HBase："></a>启动和停止 HBase：</h3><p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/start-hbase.sh</span><br></pre></td></tr></table></figure>
<p>停止</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/stop-hbase.sh</span><br><span class="line"></span><br><span class="line">如果无法正常停止, 需要手动 kill 进程.</span><br></pre></td></tr></table></figure>
<h3 id="测试-HBase-是否成功启动："><a href="#测试-HBase-是否成功启动：" class="headerlink" title="测试 HBase 是否成功启动："></a>测试 HBase 是否成功启动：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./bin/hbase shell</span><br><span class="line">HBase Shell; enter &#x27;help&#x27; for list of supported commands. Type &quot;exit&quot; to leave the HBase Shell Version 0.94.2, r1395367, Sun Oct 7 19:11:01 UTC 2012 hbase(main):001:0&gt; list TABLE</span><br></pre></td></tr></table></figure>
<h3 id="编译-HBase-Java-应用程序："><a href="#编译-HBase-Java-应用程序：" class="headerlink" title="编译 HBase Java 应用程序："></a>编译 HBase Java 应用程序：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac -cp ./hbase-0.94.2.jar:./lib/hadoop-core-1.0.3.jar Test.java</span><br><span class="line">java -cp ./:./:./lib/ Test</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>清除浮动</title>
    <url>/2021/01/01/language/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/</url>
    <content><![CDATA[<p>.clearfix:after { content:”\200B”; display:block; height:0; clear:both; }<br>.clearfix {*zoom:1;}/IE/7/6/</p>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>JS时间戳</title>
    <url>/2020/12/29/language/JS%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    <content><![CDATA[<p>我们在开发的过程中往往遇到要生成时间戳的问题（如：典型的ajax请求缓存问题）。</p>
<p>下面介绍三种形式：</p>
<p>方式一： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Date.parse(new Date()); 1452146458000 注：此方式获取精确到秒。</span><br></pre></td></tr></table></figure>

<p>方式二：  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(new Date()).valueOf(); 1452146523533 </span><br></pre></td></tr></table></figure>
<p>方式三： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Date().getTime(); 1452146592498</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2020/12/29/system/Linux%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ul>
<li>man,help,info<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">man: 是 Manual pages 的缩写 格式: man 命令名</span><br><span class="line"></span><br><span class="line">help: </span><br><span class="line">1、用于显示 shell 内建命令的简要帮助信息，帮助信息中显示有该命令的简要说明以及一些参数的使用以及说明</span><br><span class="line">2、外部命令基本上都有一个参数 --help；紧急只是忘记该用哪个参数的时候，help 这种显示简单的信息就特别实用</span><br><span class="line"></span><br><span class="line">info: 来自自由软件基金会的 GNU 项目，是 GNU 的超文本帮助系统，能够更完整的显示出 GNU 信息 格式: info 命令名</span><br></pre></td></tr></table></figure>

</li>
</ul>
<span id="more"></span>

<ul>
<li>tail<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail命令用途是依照要求将指定的文件的最后部分输出到标准设备，通常是终端，通俗讲来，就是把某个档案文件的最后几行显示到终端上，假设该档案有更新，tail会自己主动刷新，确保你看到最新的档案内容</span><br><span class="line"></span><br><span class="line">tail [ -f ] [ -c Number | -n Number | -m Number | -b Number | -k Number ] [ File ] 参数解释： -f 该参数用于监视File文件增长。 -c Number 从 Number 字节位置读取指定文件 -n Number 从 Number 行位置读取指定文件 -m Number 从 Number 多字节字符位置读取指定文件，比方你的文件假设包括中文字，假设指定-c参数，可能导致截断，但使用-m则会避免该问题 -b Number 从 Number 表示的512字节块位置读取指定文件 -k Number 从 Number 表示的1KB块位置读取指定文件 File 指定操作的目标文件名称 上述命令中，都涉及到number，假设不指定，默认显示10行。Number前面可使用正负号，表示该偏移从顶部还是从尾部開始计算 tail可运行文件一般在/usr/bin/以下。</span><br><span class="line"></span><br><span class="line">tail命令使用方法演示例子</span><br><span class="line"></span><br><span class="line">1、tail -f filename 说明：监视filename文件的尾部内容（默认10行，相当于增加参数 -n 10），刷新显示在屏幕上。退出，按下CTRL+C</span><br><span class="line"></span><br><span class="line">2、tail -n 20 filename 说明：显示filename最后20行</span><br><span class="line"></span><br><span class="line">3、tail -r -n 10 filename 说明：逆序显示filename最后10行</span><br><span class="line"></span><br><span class="line">补充： 跟tail功能相似的命令还有： cat 从第一行開始显示档案内容 tac 从最后一行開始显示档案内容 more 分页显示档案内容 less 与 more 相似，但支持向前翻页 head 仅仅显示前面几行 tail 仅仅显示后面几行 n 带行号显示档案内容 od 以二进制方式显示档案内容</span><br></pre></td></tr></table></figure></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>压力测试了解</title>
    <url>/2020/12/29/tool/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%E4%BA%86%E8%A7%A3/</url>
    <content><![CDATA[<ul>
<li>压力测试中需要掌握的几个基本概念</li>
</ul>
<p>1、吞吐率（Requests per second）</p>
<p>服务器并发处理能力的量化描述，单位是reqs/s，指的是某个并发用户数下单位时间内处理的请求数。某个并发用户数下单位时间内能处理的最大请求数，称之为最大吞吐率。</p>
<p>吞吐率是基于并发用户数的。这句话代表了两个含义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1：吞吐率和并发用户数相关；</span><br><span class="line">2：不同的并发用户数下，吞吐率一般是不同的。</span><br></pre></td></tr></table></figure>

<p>计算公式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">总请求数  / 处理完成这些请求数所花费的时间，即</span><br><span class="line"></span><br><span class="line">Request per second = Complete requests  / Time taken for tests</span><br></pre></td></tr></table></figure>

<p>2、并发连接数（The number of concurrent connections）</p>
<p>并发连接数指的是某个时刻服务器所接受的请求数目，简单的讲，就是一个会话。</p>
<span id="more"></span>

<p>3、并发用户数（The number of concurrent users，Concurrency Level）</p>
<p>要注意区分这个概念和并发连接数之间的区别，一个用户可能同时会产生多个会话，也即连接数。在HTTP/1.1下，IE7支持两个并发连接，IE8支持6个并发连接，FireFox3支持4个并发连接，所以相应的，我们的并发用户数就得除以这个基数。</p>
<p>4、用户平均请求等待时间（Time per request）</p>
<p>计算公式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">处理完成所有请求数所花费的时间/ （总请求数 / 并发用户数），即</span><br><span class="line"></span><br><span class="line">Time per request = Time taken for tests /（ Complete requests / Concurrency Level）</span><br></pre></td></tr></table></figure>

<p>5、服务器平均请求等待时间（Time per request: across all concurrent requests）</p>
<p>计算公式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">处理完成所有请求数所花费的时间 / 总请求数，即</span><br><span class="line"></span><br><span class="line">Time taken for / testsComplete requests</span><br></pre></td></tr></table></figure>

<p>可以看到，它是吞吐率的倒数。</p>
<p>同时，它也=用户平均请求等待时间/并发用户数，即</p>
<p>Time per request / Concurrency Level</p>
<p>来源：<a href="http://www.cnblogs.com/luminji/archive/2011/09/02/2163525.html">http://www.cnblogs.com/luminji/archive/2011/09/02/2163525.html</a></p>
]]></content>
      <categories>
        <category>辅助工具</category>
      </categories>
      <tags>
        <tag>AB</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins</title>
    <url>/2020/12/28/tool/Jenkins/</url>
    <content><![CDATA[<ul>
<li><p>docker运行jenkins,详见: <a href="https://github.com/upcwxiao/docker-abc/tree/main/jenkins">https://github.com/upcwxiao/docker-abc/tree/main/jenkins</a></p>
</li>
<li><p>建立流水线:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">新建任务,选择流水线</span><br><span class="line">流水线定义选择: Pipeline script from SCM</span><br><span class="line">选择git仓库地址为: https://github.com/upcwxiao/jenkins_demo</span><br><span class="line">脚本路径为: Jenkinsfile</span><br><span class="line">保存即可</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>辅助工具</category>
      </categories>
      <tags>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Termux</title>
    <url>/2020/12/27/system/Termux/</url>
    <content><![CDATA[<p>最近发现了一个很有趣的App Termux可以在Android上模拟Linux</p>
<ul>
<li>下载途径有Google Play和F-Droid(一个免费和开源应用的下载平台),我下载的是0.103版本</li>
<li>下载的为apk文件,下载完安装即可.</li>
<li>推荐一个学习的网址: <a href="https://www.sqlsec.com/2018/05/termux.html">https://www.sqlsec.com/2018/05/termux.html</a></li>
<li>我的配置:</li>
</ul>
<p>1.安装vim</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpk install vim</span><br></pre></td></tr></table></figure>
<p>2.修改源(清华大学的F-Droid源说明)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://mirror.tuna.tsinghua.edu.cn/help/termux/)</span><br><span class="line"></span><br><span class="line">编辑 $PREFIX/etc/apt/sources.list 修改为如下内容</span><br><span class="line"># The termux repository mirror from TUNA:</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main</span><br><span class="line"></span><br><span class="line">编辑 $PREFIX/etc/apt/sources.list.d/science.list 修改为如下内容</span><br><span class="line"># The termux repository mirror from TUNA:</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable</span><br><span class="line"></span><br><span class="line">编辑 $PREFIX/etc/apt/sources.list.d/game.list 修改为如下内容</span><br><span class="line"># The termux repository mirror from TUNA:</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>3.手机App默认只能访问自己的数据，如果要访问手机的存储，需要请求权限,执行: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">termux-setup-storage</span><br></pre></td></tr></table></figure>
<p>4.安装openssh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkg install openssh</span><br></pre></td></tr></table></figure>
<p>默认端口是8082,先检查下当前用户whoami, 然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh u0_a1@192.168.1.108 -p 8022</span><br></pre></td></tr></table></figure>
<p>然后就可以使用电脑操作了.<br>5.安装nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkg install nginx</span><br></pre></td></tr></table></figure>
<p>在安装玩php之后,修改配置: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim $PREFIX/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>
<p>将location ~ .php$的注释取消,fastcgi-pass修改为: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unix:/data/data/com.termux/files/usr/var/run/php-fpm.sock</span><br></pre></td></tr></table></figure>

<p>然后在fastcgi-param 前添加: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/data/data/com.termux/files/usr/share/nginx/html</span><br><span class="line"></span><br><span class="line">完整的为: </span><br><span class="line">data/data/com.termux/files/usr/share/nginx/html$fastcgi_script_name;</span><br><span class="line"></span><br><span class="line">默认的文件部署路径为:</span><br><span class="line">/data/data/com.termux/files/usr/share/nginx/html</span><br></pre></td></tr></table></figure>
<p>6.安装php-fpm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkg install php-fpm</span><br></pre></td></tr></table></figure>
<p>7.安装git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkg install git</span><br></pre></td></tr></table></figure>
<p>8.安装java<br>网上指导JDK8的安装,fork下来了: <a href="https://github.com/upcwxiao/Termux-Java">https://github.com/upcwxiao/Termux-Java</a></p>
<p>至此,Termux安装并能运行了一些服务,经测试Java 还是有点慢,我部署了一个Spring Boot的项目基本链接mysql,reids等,没有跑起来…也可能我的手机配置太低的缘故,毕竟几年前的旧机器了,不过一般的操作,学习还是够用了.</p>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Termux</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot-Swagger</title>
    <url>/2020/12/27/language/SpringBoot-Swagger/</url>
    <content><![CDATA[<ul>
<li>OpenAPI &amp; Swagger<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OpenAPI:“开放 API 战略” (Open API Initiativev) , 在2017年发布了 OpenAPI 规范3.0版的预览，</span><br><span class="line">并规划于二月底发布实施草案（Implementer Draft）.</span><br><span class="line"></span><br><span class="line">OpenAPI规范(OpenAPI Specification,简称:OAS)是基于Swagger 2.0构建，Swagger是SmartBear2015年</span><br><span class="line">贡献给Linux基金会,使Swagger项目专注于围绕OAS的开源工具.</span><br></pre></td></tr></table></figure></li>
<li>SpringFox</li>
</ul>
<p>SpringFox是Spring社区维护的一个项目（非官方），帮助使用者将Swagger2集成到 Spring中,用于Spring中<br>帮助开发者生成文档，并可以轻松的在Spring Boot中使用.<br>但,其在2020.7月才更新支持OpenAPI3,目前网上大多的文档都是Swagger2的配置说明,官方也未更新新的文档,<br>仅发布一个新的版本,好处是兼容Swagger2注解.</p>
<p>官方地址: <a href="http://springfox.github.io/springfox">http://springfox.github.io/springfox</a></p>
<p>Springfox 3.0.0添加到Spring Boot项目中</p>
<p>1.引入依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>2.添加自定义配置,也可以不添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author upcwxiao</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class ApplicationContextUtil implements ApplicationContextAware &#123;</span><br><span class="line"></span><br><span class="line">    private static ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    public ApplicationContextUtil() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        ApplicationContextUtil.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Object getBean(String beanName) &#123;</span><br><span class="line">        return applicationContext != null ? applicationContext.getBean( beanName ) : null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通过class获取Bean</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; T getBean(Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        return applicationContext != null ? applicationContext.getBean( clazz ) : null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通过name,以及Clazz返回指定的Bean</span><br><span class="line">     */</span><br><span class="line">    public static &lt;T&gt; T getBean(String name, Class&lt;T&gt; clazz) &#123;</span><br><span class="line">        return applicationContext != null ? applicationContext.getBean( name, clazz ) : null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 国际化使用</span><br><span class="line">     */</span><br><span class="line">    public static String getMessage(String key) &#123;</span><br><span class="line">        return applicationContext != null ? applicationContext.getMessage(key, null, Locale.getDefault()) : StringUtils.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取环境</span><br><span class="line">     */</span><br><span class="line">    public static String getActiveProfile() &#123;</span><br><span class="line">        return applicationContext != null ? applicationContext.getEnvironment().getActiveProfiles()[0] : StringUtils.EMPTY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableOpenApi</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * swagger2的配置文件</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public Docket createRestApi() &#123;</span><br><span class="line"></span><br><span class="line">        boolean isNoProd = !&quot;prod&quot;.equals(ApplicationContextUtil.getActiveProfile());</span><br><span class="line"></span><br><span class="line">        return new Docket(DocumentationType.OAS_30)</span><br><span class="line">                .enable(isNoProd)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.upcwxiao.blog.controller.admin&quot;))</span><br><span class="line">                .paths(PathSelectors.any())</span><br></pre></td></tr></table></figure>
<pre><code>/**
 * 构建api文档的信息
 */
private ApiInfo apiInfo() &#123;
    return new ApiInfoBuilder()
            // 设置页面标题
            .title(&quot;使用swagger3构建api接口文档&quot;)
            // 设置联系人
            .contact(new Contact(&quot;upcwxiao&quot;, &quot;http://127.0.0.1&quot;, &quot;upcwxiao@xx.com&quot;))
            // 描述
            .description(&quot;欢迎访问接口文档，这里是描述信息&quot;)
            // 定义版本号
            .version(&quot;1.0&quot;)
            .build();
&#125;</code></pre><p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.访问地址: </span><br></pre></td></tr></table></figure>
<p>/swagger-ui/index.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- SpringDoc</span><br><span class="line"></span><br><span class="line">SpringDoc是Spring社区维护的一个项目（非官方），帮助使用者将Swagger3集成到 Spring中,也是用来在Spring中</span><br><span class="line">帮助开发者生成文档，并可以轻松的在Spring Boot中使用.</span><br><span class="line">其支持Swagger3较早,单其注解与Swagger2不兼容.</span><br><span class="line"></span><br><span class="line">官方文档地址: https://springdoc.org/#Introduction</span><br><span class="line"></span><br><span class="line">添加到Spring Boot中:</span><br><span class="line"></span><br><span class="line">1.引入依赖</span><br></pre></td></tr></table></figure>
<dependency>
    <groupId>org.springdoc</groupId>
    <artifactId>springdoc-openapi-ui</artifactId>
    <version>1.5.2</version>
</dependency>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2.添加配置:</span><br></pre></td></tr></table></figure>
springdoc.packagesToScan=com.upcwxiao.blog.controller.admin
springdoc.pathsToMatch=/**
springdoc.swagger-ui.path=/{可以任意地址/}swagger-ui.html
```

]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu-删除内核</title>
    <url>/2020/07/07/system/Ubuntu-%E5%88%A0%E9%99%A4%E5%86%85%E6%A0%B8/</url>
    <content><![CDATA[<ul>
<li>1、第一步<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看当前内核 uname -a</span><br></pre></td></tr></table></figure></li>
<li>2、第二步<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看所有内核 dpkg --get-selections | grep linux</span><br></pre></td></tr></table></figure></li>
<li>3、第三部<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">移除冗余内核 sudo apt-get remove \</span><br><span class="line">linux-headers-4.15.0-39 \</span><br><span class="line">linux-headers-4.15.0-39-generic \</span><br><span class="line">linux-image-4.15.0-39-generic \</span><br><span class="line">linux-modules-4.15.0-39-generic \</span><br><span class="line">linux-modules-extra-4.15.0-39-generic</span><br><span class="line"></span><br><span class="line">状态为deinstall即已经卸载，如果觉得看着不舒服的话可以使用purge连配置文件里一起彻底删除，清理内核列表</span><br><span class="line"></span><br><span class="line">sudo apt-get purge \</span><br><span class="line">linux-headers-4.15.0-39 \</span><br><span class="line">linux-headers-4.15.0-39-generic \</span><br><span class="line">linux-image-4.15.0-39-generic \</span><br><span class="line">linux-modules-4.15.0-39-generic \</span><br><span class="line">linux-modules-extra-4.15.0-39-generic</span><br></pre></td></tr></table></figure></li>
<li>4、第四部<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">更新系统引导 sudo update-grub  #根据情况选择grub/grub2</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>向前向后兼容</title>
    <url>/2020/07/07/other/%E5%90%91%E5%89%8D%E5%90%91%E5%90%8E%E5%85%BC%E5%AE%B9/</url>
    <content><![CDATA[<p>向后兼容处理的是一个以较早版本编译的程序集是否可以在较新版本上执行的问题。向前兼容处理的是一个以较新版本编译的程序集是否可以在较老版本上执行的问题。向后兼容是主要变动产品对类型定义和类型的行为。向前兼容是通过元数据版本来控制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">引用两段微软网站上的话，以资参考理解：</span><br><span class="line">向后兼容性。2007 Microsoft Office 系统向后兼容下列早期版本：Microsoft Office 2000、Microsoft Office XP 和 </span><br><span class="line">Microsoft Office 2003。这些版本的用户可以轻松地采用新的格式，并继续从现有文件中获得最大的益处。特别是他们还可以继续</span><br><span class="line">使用旧的 .doc、.xls 和 .ppt 二进制格式，这些格式与 2007 文件格式完全兼容。早期 Office 版本的用户可以下载一个免费</span><br><span class="line">更新，这样他们就可以在早期版本中使用新格式打开和编辑文件。安装 2007 Office 版本的用户可以将默认的文件格式设置为他们</span><br><span class="line">选择的任何格式。这有助于确保用户能够继续使用基于早期版本的第三方解决方案，并与已升级的同事、供应商、客户和其他人协同工作。</span><br></pre></td></tr></table></figure>
<p>向前兼容性：应用程序的早期版本能够打开较新版本中的文件并忽略早期版本中未实现的功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如，Word 2003 向前兼容 Word 2007，因为它能够成功地使用转换器打开 Word 2007 文件。</span><br><span class="line">向前兼容的英文为 Forwards Compatibility，Forward有 “将来” 的含义。因此向前兼容就是指：以前的版本支持现在版本</span><br><span class="line">生成的数据，现在的版本支持以后的版本数据。比如你的CD盘可以放在CD光驱播放，也可以放在DVD光驱播放。</span><br><span class="line">向后兼容的英文为Backwards Compatibility，Backward有 “回头” 的意思。所以向后兼容就是指现在的版本可以支持</span><br><span class="line">以前的版本数据。比如你的PC的DVD光驱也可以播放CD盘。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>字符编码趣闻</title>
    <url>/2020/07/07/other/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%B6%A3%E9%97%BB/</url>
    <content><![CDATA[<h3 id="unicode，ansi，utf-8，unicode-big-endian的故事"><a href="#unicode，ansi，utf-8，unicode-big-endian的故事" class="headerlink" title="unicode，ansi，utf-8，unicode big endian的故事"></a>unicode，ansi，utf-8，unicode big endian的故事</h3><p>很久很久以前，有一群人，他们决定用8个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们看到8个开关状态是好的，于是他们把这称为”字节”。<br>再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出很多状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为”计算机”。 </p>
<p>开始计算机只在美国用。八位的字节一共可以组合出256(2的8次方)种不同的状态。<br>他们把其中的编号从0开始的32种状态分别规定了特殊的用途，一但终端、打印机遇上约定好的这些字节被传过来时，就要做一些约定的动作。遇上00x10, 终端就换行，遇上0x07, 终端就向人们嘟嘟叫，遇上0x1b, 打印机就打印反白的字，或者终端就用彩色显示字母。他们看到这样很好，于是就把这些0x20以下的字节状态称为”控制码”。 </p>
<span id="more"></span>

<p>他们又把所有的空 格、标点符号、数字、大小写字母分别用连续的字节状态表示，一直编到了第127号，这样计算机就可以用不同字节来存储英语的文字了。大家看到这样，都感觉很好，于是大家都把这个方案叫做 ANSI 的”Ascii”编码（American Standard Code for Information Interchange，美国信息互换标准代码）。当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。<br>后来，就像建造巴比伦塔一样，世界各地的都开始使用计算机，但是很多国家用的不是英文，他们的字母里有许多是ASCII里没有的，为了可以在计算机保存他们的文字，他们决定采用127号之后的空位来表示这些新的字母、符号，还加入了很多画表格时需要用到的横线、竖线、交叉等形状，一直把序号编到了最后一个状态255。从128到255这一页的字符集被称”扩展字符集”。从此之后，贪婪的人类再没有新的状态可以用了，美帝国主义可能没有想到还有第三世界国家的人们也希望可以用到计算机吧！<br>等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。但是这难不倒智慧的中国人民，我们不客气地把那些127号之后的奇异符号们直接取消掉, 规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的 字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。<br>中国人民看到这样很不错，于是就把这种汉字方案叫做 “GB2312”。GB2312 是对 ASCII 的中文扩展。<br>但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人。于是我们不得不继续把 GB2312 没有用到的码位找出来老实不客气地用上。<br>后来还是不够用，于是干脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。结果扩展之后的编码方案被称为 GBK 标准，GBK 包括了 GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。<br>后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK 扩成了 GB18030。从此之后，中华民族的文化就可以在计算机时代中传承了。<br>中国的程序员们看到这一系列汉字编码的标准是好的，于是通称他们叫做 “DBCS”（Double Byte Charecter Set 双字节字符集）。在DBCS系列标准里，最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此他们写的程序为了支持中文处理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了。那时候凡是受过加持，会编程的计算机僧侣们都要每天念下面这个咒语数百遍：<br>“一个汉字算两个英文字符！一个汉字算两个英文字符……” </p>
<p>因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码，连大陆和台湾这样只相隔了150海里，使用着同一种语言的兄弟地区，也分别采用了不同的 DBCS 编码方案——当时的中国人想让电脑显示汉字，就必须装上一个”汉字系统”，专门用来处理汉字的显示、输入的问题，但是那个台湾的愚昧封建人士写的算命程序 就必须加装另一套支持 BIG5 编码的什么”倚天汉字系统”才可以用，装错了字符系统，显示就会乱了套！这怎么办？而且世界民族之林中还有那些一时用不上电脑的穷苦人民，他们的文字又怎 么办？<br>真是计算机的巴比伦塔命题啊！<br>正在这时，大天使加百列及时出现了——一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “UNICODE”。<br>UNICODE 开始制订时，计算机的存储器容量极大地发展了，空间再也不成为问题了。于是 ISO 就直接规定必须用两个字节，也就是16位来统一表示所有的字符，对于ascii里的那些“半角”字符，UNICODE 包持其原编码不变，只是将其长度由原来的8位扩展为16位，而其他文化和语言的字符则全部重新统一编码。由于”半角”英文符号只需要用到低8位，所以其高8位永远是0，因此这种大气的方案在保存英文文本时会多浪费一倍的空间。<br>这时候，从旧社会里走过来的程序员开始发现一个奇怪的现象：他们的 strlen函数靠不住了，一个汉字不再是相当于两个字符了，而是一个！是的，从 UNICODE 开始，无论是半角的英文字母，还是全角的汉字，它们都是统一的”一个字符”！同时，也都是统一的”两个字节”，请注意”字符”和”字节”两个术语的不同， “字节”是一个8位的物理存贮单元，而“字符”则是一个文化相关的符号。在UNICODE 中，一个字符就是两个字节。一个汉字算两个英文字符的时代已经快过去了。<br>从前多种字符集存在时，那些做多语言软件的公司遇上过很大麻烦，他们为了在不同的国家销售同一套软件，就不得不在区域化软件时也加持那个双字节字符集咒语，不仅要处处小心不要搞错，还要把软件中的文字在不同的字符集中转来转去。UNICODE 对于他们来说是一个很好的一揽子解决方案，于是从 Windows NT 开始，MS 趁机把它们的操作系统改了一遍，把所有的核心代码都改成了用 UNICODE 方式工作的版本，从这时开始，WINDOWS 系统终于无需要加装各种本土语言系统，就可以显示全世界上所有文化的字符了。<br>但是，UNICODE 在制订时没有考虑与任何一种现有的编码方案保持兼容，这使得 GBK 与UNICODE 在汉字的内码编排上完全是不一样的，没有一种简单的算术方法可以把文本内容从UNICODE编码和另一种编码进行转换，这种转换必须通过查表来进行。<br>如前所述，UNICODE 是用两个字节来表示为一个字符，他总共可以组合出65535不同的字符，这大概已经可以覆盖世界上所有文化的符号。如果还不够也没有关系，ISO已经准备 了UCS-4方案，说简单了就是四个字节来表示一个字符，这样我们就可以组合出21亿个不同的字符出来（最高位有其他用途），这大概可以用到银河联邦成立 那一天吧！ </p>
<p>UNICODE 来到时，一起到来的还有计算机网络的兴起，UNICODE 如何在网络上传输也是一个必须考虑的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF8就是每次8个位传输数据，而UTF16就是每次16个位，只不过为了传输时的可靠性，从 UNICODE 到 UTF 时并不是直接的对应，而是要过一些算法和规则来转换。<br>受到过网络编程加持的计算机僧侣们都知道，在网络里传递信息时有一个很重要的问题，就是对于数据高低位的解读方式，一些计算机是采用低位先发送的方法，例如我们PC机采用的 INTEL 架构，而另一些是采用高位先发送的方式，在网络中交换数据时，为了核对双方对于高低位的认识是否是一致的，采用了一种很简便的方法，就是在文本流的开始时向对方发送一个标志符——如果之后的文本是高位在位，那就发送”FEFF”，反之，则发送”FFFE”。不信你可以用二进制方式打开一个UTF-X格式的文件，看看开头两个字节是不是这两个字节？ </p>
<p>讲到这里，我们再顺便说说一个很著名的奇怪现象：当你在 windows 的记事本里新建一个文件，输入”联通”两个字之后，保存，关闭，然后再次打开，你会发现这两个字已经消失了，代之的是几个乱码！呵呵，有人说这就是联通之所以拼不过移动的原因。<br>其实这是因为GB2312编码与UTF8编码产生了编码冲撞的原因。<br>从网上引来一段从UNICODE到UTF8的转换规则： </p>
<p>Unicode<br>UTF-8 </p>
<p>0000 - 007F<br>0xxxxxxx </p>
<p>0080 - 07FF<br>110xxxxx 10xxxxxx </p>
<p>0800 - FFFF<br>1110xxxx 10xxxxxx 10xxxxxx </p>
<p>例如”汉”字的Unicode编码是6C49。6C49在0800-FFFF之间，所以要用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将6C49写成二进制是：0110 1100 0100 1001，将这个比特流按三字节模板的分段方法分为0110 110001 001001，依次代替模板中的x，得到：1110-0110 10-110001 10-001001，即E6 B1 89，这就是其UTF8的编码。<br>而当你新建一个文本文件时，记事本的编码默认是ANSI, 如果你在ANSI的编码输入汉字，那么他实际就是GB系列的编码方式，在这种编码下，”联通”的内码是：<br>c1 1100 0001<br>aa 1010 1010<br>cd 1100 1101<br>a8 1010 1000<br>注意到了吗？第一二个字节、第三四个字节的起始部分的都是”110”和”10”，正好与UTF8规则里的两字节模板是一致的，于是再次打开记事本时，记事本就误认为这是一个UTF8编码的文件，让我们把第一个字节的110和第二个字节的10去掉，我们就得到了”00001 101010”，再把各位对齐，补上前导的0，就得到了”0000 0000 0110 1010”，不好意思，这是UNICODE的006A，也就是小写的字母”j”，而之后的两字节用UTF8解码之后是0368，这个字符什么也不是。这就是只有”联通”两个字的文件没有办法在记事本里正常显示的原因。<br>而如果你在”联通”之后多输入几个字，其他的字的编码不见得又恰好是110和10开始的字节，这样再次打开时，记事本就不会坚持这是一个utf8编码的文件，而会用ANSI的方式解读之，这时乱码又不出现了。 </p>
<p>好了，终于可以回答NICO的问题了，在数据库里，有n前缀的字串类型就是UNICODE类型，这种类型中，固定用两个字节来表示一个字符，无论这个字符是汉字还是英文字母，或是别的什么。<br>如果你要测试”abc汉字”这个串的长度，在没有n前缀的数据类型里，这个字串是7个字符的长度，因为一个汉字相当于两个字符。而在有n前缀的数据类型里，同样的测试串长度的函数将会告诉你是5个字符，因为一个汉字就是一个字符。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>Profile</title>
    <url>/2020/07/06/system/Profile/</url>
    <content><![CDATA[<h3 id="环境变量：-etc-profile-etc-bashrc-profile-bashrc"><a href="#环境变量：-etc-profile-etc-bashrc-profile-bashrc" class="headerlink" title="环境变量：/etc/profile; /etc/bashrc; ~/.profile; ~/.bashrc"></a>环境变量：/etc/profile; /etc/bashrc; ~/.profile; ~/.bashrc</h3><p>一、环境变量介绍：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在Linux系统中，环境变量按照其作用范围不同大致可以分为系统级环境变量和用户级环境变量。</span><br><span class="line"></span><br><span class="line">系统级环境变量：每一个登录到系统的用户都能够读取到系统级的环境变量；</span><br><span class="line">用户级环境变量：每一个登录到系统的用户只能够读取属于自己的用户级的环境变量；</span><br><span class="line">自然而然地，环境变量的配置文件也相应的被分成了系统级和用户级两种。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>二、系统级：</p>
<p>1、/etc/profile</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在系统启动后,第一个用户登录时运行,并从/etc/profile.d目录的配置文件中搜集shell的设置，使用该文件配置的环境变量</span><br><span class="line">将应用于登录到系统的每一个huanjing以下命令可以使配置文件立刻生效。</span><br><span class="line"></span><br><span class="line">　　source /etc/profile</span><br><span class="line">　　echo $PATH</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>2、/etc/bashrc（Ubuntu和Debian中是/etc/bash.bashrc）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在 bash shell 打开时运行，修改该文件配置的环境变量将会影响所有用户使用的bash shell。</span><br><span class="line">注意：这里的bash shell有不同的类别，不同的类别所使用的环境变量配置文件也有所不同。</span><br><span class="line">一般情况下，非登录shell不会执行任何profile文件，非交互shell模式不会执行任何bashrc文件。</span><br></pre></td></tr></table></figure>

<p>3、/etc/environment</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在系统启动时运行，用于配置与系统运行相关但与用户无关的环境变量，修改该文件配置的环境变量将影响全局。</span><br></pre></td></tr></table></figure>


<p>三、用户级：</p>
<p>1、~/.profile（推荐首选）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.profile: executed by Bourne-compatible login shells.</span><br><span class="line"></span><br><span class="line">当用户登录时执行，每个用户都可以使用该文件来配置专属于自己使用的shell信息。</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2、~/.bashrc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.bashrc: executed by bash(1) for non-login shells.</span><br><span class="line"></span><br><span class="line">当用户登录时以及每次打开新的shell时该文件都将被读取，不推荐在这里配置用户专用的环境变量，因为每开一个shell，</span><br><span class="line">该文件都会被读取一次，效率肯定受影响。</span><br><span class="line">生效用：source</span><br><span class="line">bashrc和profile的差异</span><br><span class="line">从上面的英文描述可以知道，bashrc和profile的差异在于：</span><br><span class="line"></span><br><span class="line">　　注意：通常我们修改bashrc,有些linux的发行版本不一定有profile这个文件；</span><br><span class="line"></span><br><span class="line">1. bashrc 是在系统启动后就会自动运行。</span><br><span class="line">2. profile 是在用户登录后才会运行。</span><br><span class="line">3. 进行设置后，可运用source bashrc命令更新bashrc，也可运用source profile命令更新profile。</span><br><span class="line">4. /etc/profile中设定的变量(全局)的可以作用于任何用户，而~/.bashrc等中设定的变量(局部)只能继承</span><br><span class="line">/etc/profile中的变量，他们是&quot;父子&quot;关系。</span><br></pre></td></tr></table></figure>

<p>3、~/.bash_profile 或 ~./bash_login</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.bash_profile or ~./bash_login - If one of these file exist, bash executes it rather then &quot;~/.profile&quot;</span><br><span class="line">when it is started as a login shell. (Bash will prefer &quot;~/.bash_profile&quot; to &quot;~/.bash_login&quot;).</span><br><span class="line">However, these files won&#x27;t influence a graphical session by default.</span><br><span class="line"></span><br><span class="line">以上是ubuntu官网给出的关于~/.bash_profile 和 ~./bash_login 的说明，翻译为中文：</span><br><span class="line">~/.bash_profile 或 ~./bash_login -</span><br><span class="line">如果有其中的一个文件存在的话, 当启动的是一个登录shell时，Bash 会执行该文件而不会执行~/.profile ；</span><br><span class="line">如果两个文件都存在的话，Bash 将会优先执行~/.bash_profile 而不是~/.bash_login ；</span><br><span class="line">然而, 默认情况下，这些文件不会影响图形会话。</span><br></pre></td></tr></table></figure>

<p>4、~/.bash_logout</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当每次退出系统(退出bash shell)时执行该文件。</span><br><span class="line"></span><br><span class="line">注意：Linux系统使用 $VARIABLE_NAME 访问环境变量，多个环境变量之间使用 “:”分隔，Windows系统使用 </span><br><span class="line">%VARIABLE_NAME% 访问环境变量，多个环境变量之间使用 ; 分隔。</span><br></pre></td></tr></table></figure>

<p>四、执行顺序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般情况下，Linux加载环境变量配置文件的执行顺序为：</span><br><span class="line"></span><br><span class="line">==&gt; /etc/profile</span><br><span class="line">==&gt; ~/.bash_profile | ~/.bash_login | ~/.profile</span><br><span class="line">==&gt; ~/.bashrc</span><br><span class="line">==&gt; /etc/bashrc</span><br><span class="line">==&gt; ~/.bash_logout</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK</title>
    <url>/2020/07/06/language/JDK/</url>
    <content><![CDATA[<ul>
<li>1、下载JDK</li>
<li>2、解压源码包<br>通过终端在/usr/local目录下新建java文件夹，命令行：</li>
<li>3、解压源码包<br>通过终端在/usr/local目录下新建java文件夹，命令行：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mkdir /usr/local/java</span><br></pre></td></tr></table></figure>
然后将下载到压缩包拷贝到java文件夹中，命令行：<br>进入jdk源码包所在目录<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp jdk-8u25-linux-x64.tar.gz /usr/local/java</span><br></pre></td></tr></table></figure>
然后进入java目录，命令行：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/local/java</span><br></pre></td></tr></table></figure>
解压压缩包，命令行：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo tar xvf jdk-8u25-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>
然后可以把压缩包删除，命令行：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rm jdk-8u25-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

</li>
</ul>
<span id="more"></span>

<ul>
<li>4、设置jdk环境变量<br>这里采用全局设置方法，它是所有用户的共用的环境变量<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure>
打开之后在末尾添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_25  </span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre  </span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib  </span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure>
请记住，在上述添加过程中，等号两侧不要加入空格，不然会出现“不是有效的标识符”，因为source /etc/profile 时不能识别多余到空格，会理解为是路径一部分。<br>然后保存。</li>
</ul>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode开发go</title>
    <url>/2020/06/13/tool/vscode%E5%BC%80%E5%8F%91go/</url>
    <content><![CDATA[<ul>
<li><p>设置go模块代理</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://goproxy.cn/</span><br></pre></td></tr></table></figure>
</li>
<li><p>Windows/Linux平台按下Ctrl+Shift+P，Mac平台按Command+Shift+P</p>
</li>
<li><p>输入Go:Install/Update Tools</p>
</li>
<li><p>全选安装</p>
</li>
</ul>
]]></content>
      <categories>
        <category>辅助工具</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>linux环境安装go</title>
    <url>/2020/06/13/language/linux%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85go/</url>
    <content><![CDATA[<ul>
<li>下载go <a href="https://studygolang.com/dl">https://studygolang.com/dl</a></li>
<li>配置环境变量   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/profile或者用户目录下的.profile文件中配置环境变量</span><br><span class="line">区别是在/etc/profile下配置对所有用户起作用</span><br><span class="line">.profile中配置只对当前用户起作用</span><br><span class="line"></span><br><span class="line">export GOROOT=/usr/local/go</span><br><span class="line">export GOPATH=/home/wx/goProjects </span><br><span class="line">export GOBIN=$GOPATH/bin</span><br><span class="line">export PATH=$PATH:$GOROOT/bin</span><br><span class="line">export PATH=$PATH:$GOPATH/bin</span><br><span class="line"></span><br><span class="line">GOROOT设置golang的安装位置，我们解压到了/usr/local/目录，该目录下的go/文件夹一定是go的环境的根目录，</span><br><span class="line">就是打开go目录后别再有一个go/目录</span><br><span class="line"></span><br><span class="line">GOBIN目录是执行 go install 后生成可执行文件的目录</span><br><span class="line"></span><br><span class="line">GOPATH是我们的工作目录，一般我们设置到用户目录下，这个要根据你电脑的实际情况去配置</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>from:<a href="https://www.jianshu.com/p/33cf4f41cae9">https://www.jianshu.com/p/33cf4f41cae9</a></p>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo发布文章</title>
    <url>/2020/04/21/hexo/hexo%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new post XXX</span><br><span class="line">npm run build</span><br><span class="line">npm run deploy</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>docker官方php安装扩展</title>
    <url>/2020/04/21/language/docker%E5%AE%98%E6%96%B9php%E5%AE%89%E8%A3%85%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<p>PHP 容器配置</p>
<p>从官方基础版本构建,官方版本默认安装扩展,我們要添加一些其他扩展: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Core, ctype, curl</span><br><span class="line"># date, dom</span><br><span class="line"># fileinfo, filter, ftp</span><br><span class="line"># hash</span><br><span class="line"># iconv</span><br><span class="line"># json</span><br><span class="line"># libxml</span><br><span class="line"># mbstring, mysqlnd</span><br><span class="line"># openssl</span><br><span class="line"># pcre, PDO, pdo_sqlite, Phar, posix</span><br><span class="line"># readline, Reflection, session, SimpleXML, sodium, SPL, sqlite3, standard</span><br><span class="line"># tokenizer</span><br><span class="line"># xml, xmlreader, xmlwriter</span><br><span class="line"># zlib</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># PHP 容器配置</span><br><span class="line"></span><br><span class="line"># 从官方基础版本构建</span><br><span class="line">FROM php:7.2-fpm</span><br><span class="line"># 官方版本默认安装扩展: </span><br><span class="line"># Core, ctype, curl</span><br><span class="line"># date, dom</span><br><span class="line"># fileinfo, filter, ftp</span><br><span class="line"># hash</span><br><span class="line"># iconv</span><br><span class="line"># json</span><br><span class="line"># libxml</span><br><span class="line"># mbstring, mysqlnd</span><br><span class="line"># openssl</span><br><span class="line"># pcre, PDO, pdo_sqlite, Phar, posix</span><br><span class="line"># readline, Reflection, session, SimpleXML, sodium, SPL, sqlite3, standard</span><br><span class="line"># tokenizer</span><br><span class="line"># xml, xmlreader, xmlwriter</span><br><span class="line"># zlib</span><br><span class="line"></span><br><span class="line"># 1.0.2 增加 bcmath, calendar, exif, gettext, sockets, dba, </span><br><span class="line"># mysqli, pcntl, pdo_mysql, shmop, sysvmsg, sysvsem, sysvshm 扩展</span><br><span class="line">RUN docker-php-ext-install -j$(nproc) bcmath calendar exif gettext \</span><br><span class="line">sockets dba mysqli pcntl pdo_mysql shmop sysvmsg sysvsem sysvshm</span><br><span class="line"></span><br><span class="line"># 1.0.3 增加 bz2 扩展, 读写 bzip2（.bz2）压缩文件</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends libbz2-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) bz2</span><br><span class="line"></span><br><span class="line"># 1.0.4 增加 enchant 扩展, 拼写检查库</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends libenchant-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) enchant</span><br><span class="line"></span><br><span class="line"># 1.0.5 增加 GD 扩展. 图像处理</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends libfreetype6-dev libjpeg62-turbo-dev libpng-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) gd</span><br><span class="line"></span><br><span class="line"># 1.0.6 增加 gmp 扩展, GMP</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends libgmp-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) gmp</span><br><span class="line"></span><br><span class="line"># 1.0.7 增加 soap wddx xmlrpc tidy xsl 扩展</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends libxml2-dev libtidy-dev libxslt1-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) soap wddx xmlrpc tidy xsl</span><br><span class="line"></span><br><span class="line"># 1.0.8 增加 zip 扩展</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends libzip-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) zip</span><br><span class="line"></span><br><span class="line"># 1.0.9 增加 snmp 扩展</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends libsnmp-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) snmp</span><br><span class="line"></span><br><span class="line"># 1.0.10 增加 pgsql, pdo_pgsql 扩展 </span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends libpq-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) pgsql pdo_pgsql</span><br><span class="line"></span><br><span class="line"># 1.0.11 增加 pspell 扩展 </span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends libpspell-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) pspell</span><br><span class="line"></span><br><span class="line"># 1.0.12 增加 recode 扩展 </span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends librecode-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) recode</span><br><span class="line"></span><br><span class="line"># 1.0.13 增加 PDO_Firebird 扩展 </span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends firebird-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) pdo_firebird</span><br><span class="line"></span><br><span class="line"># 1.0.14 增加 pdo_dblib 扩展 </span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends freetds-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-configure pdo_dblib --with-libdir=lib/x86_64-linux-gnu &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) pdo_dblib</span><br><span class="line"></span><br><span class="line"># 1.0.15 增加 ldap 扩展 </span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends libldap2-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-configure ldap --with-libdir=lib/x86_64-linux-gnu &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) ldap</span><br><span class="line"></span><br><span class="line"># 1.0.16 增加 imap 扩展 </span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends libc-client-dev libkrb5-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-configure imap --with-kerberos --with-imap-ssl &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) imap</span><br><span class="line"></span><br><span class="line"># 1.0.17 增加 interbase 扩展 </span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends firebird-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) interbase</span><br><span class="line"></span><br><span class="line"># 1.0.18 增加 intl 扩展 </span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends libicu-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">docker-php-ext-install -j$(nproc) intl</span><br><span class="line"></span><br><span class="line"># 1.0.19 增加 mcrypt 扩展 </span><br><span class="line">RUN apt-get update &amp;&amp; \ </span><br><span class="line">apt-get install -y --no-install-recommends libmcrypt-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">pecl install mcrypt-1.0.1 &amp;&amp; \</span><br><span class="line">docker-php-ext-enable mcrypt</span><br><span class="line"></span><br><span class="line"># 1.0.20 imagick 扩展</span><br><span class="line">RUN export CFLAGS=&quot;$PHP_CFLAGS&quot; CPPFLAGS=&quot;$PHP_CPPFLAGS&quot; LDFLAGS=&quot;$PHP_LDFLAGS&quot; &amp;&amp; \</span><br><span class="line">apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y --no-install-recommends libmagickwand-dev &amp;&amp; \</span><br><span class="line">rm -rf /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">pecl install imagick-3.4.3 &amp;&amp; \</span><br><span class="line">docker-php-ext-enable imagick</span><br><span class="line"></span><br><span class="line"># 1.0.21 增加 Memcached 扩展 </span><br><span class="line">RUN apt-get update &amp;&amp; \ </span><br><span class="line">apt-get install -y --no-install-recommends zlib1g-dev libmemcached-dev &amp;&amp; \</span><br><span class="line">rm -r /var/lib/apt/lists/* &amp;&amp; \</span><br><span class="line">pecl install memcached &amp;&amp; \</span><br><span class="line">docker-php-ext-enable memcached</span><br><span class="line"></span><br><span class="line"># 1.0.22 redis 扩展</span><br><span class="line">RUN pecl install redis-4.0.1 &amp;&amp; docker-php-ext-enable redis</span><br><span class="line"></span><br><span class="line"># 1.0.23 增加 opcache 扩展 </span><br><span class="line">RUN docker-php-ext-configure opcache --enable-opcache &amp;&amp; docker-php-ext-install opcache</span><br><span class="line"></span><br><span class="line"># 1.0.24 增加 odbc, pdo_odbc 扩展 </span><br><span class="line">RUN set -ex; \</span><br><span class="line">docker-php-source extract; \</span><br><span class="line">&#123; \</span><br><span class="line">     echo &#x27;# https://github.com/docker-library/php/issues/103#issuecomment-271413933&#x27;; \</span><br><span class="line">     echo &#x27;AC_DEFUN([PHP_ALWAYS_SHARED],[])dnl&#x27;; \</span><br><span class="line">     echo; \</span><br><span class="line">     cat /usr/src/php/ext/odbc/config.m4; \</span><br><span class="line">&#125; &gt; temp.m4; \</span><br><span class="line">mv temp.m4 /usr/src/php/ext/odbc/config.m4; \</span><br><span class="line">apt-get update; \</span><br><span class="line">apt-get install -y --no-install-recommends unixodbc-dev; \</span><br><span class="line">rm -rf /var/lib/apt/lists/*; \</span><br><span class="line">docker-php-ext-configure odbc --with-unixODBC=shared,/usr; \</span><br><span class="line">docker-php-ext-configure pdo_odbc --with-pdo-odbc=unixODBC,/usr; \</span><br><span class="line">docker-php-ext-install odbc pdo_odbc; \</span><br><span class="line">docker-php-source delete</span><br><span class="line"></span><br><span class="line"># 镜像信息</span><br><span class="line">LABEL Author=&quot;Leo&quot;</span><br><span class="line">LABEL Version=&quot;1.0.25-fpm&quot;</span><br><span class="line">LABEL Description=&quot;PHP FPM 7.2 镜像. All extensions.&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>from：<a href="https://www.jianshu.com/p/20fcca06e27e">https://www.jianshu.com/p/20fcca06e27e</a></p>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Php</tag>
      </tags>
  </entry>
  <entry>
    <title>php安装xdebug</title>
    <url>/2020/04/05/language/php%E5%AE%89%E8%A3%85xdebug/</url>
    <content><![CDATA[<ul>
<li>打开<a href="https://xdebug.org/wizard">https://xdebug.org/wizard</a></li>
<li>输出phpinfo()</li>
<li>粘贴到界面中</li>
<li>按照提示操作即可（如果是多版本PHP 注意php-config）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">./configure --with-php-config=/www/server/php/73/bin/php-config</span><br></pre></td></tr></table></figure></li>
<li>在php.ini中添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zend_extension=xdebug.so</span><br><span class="line">xdebug.trace_output_dir=/tmp/xdebug</span><br><span class="line">xdebug.profiler_output_dir = /tmp/xdebug</span><br><span class="line">xdebug.profiler_enable = On</span><br><span class="line">xdebug.profiler_enable_trigger = 1</span><br><span class="line">xdebug.remote_enable=1</span><br><span class="line">xdebug.remote_handler=dbgp</span><br><span class="line">xdebug.remote_mode=req</span><br><span class="line">xdebug.remote_host=192.168.33.1</span><br><span class="line">xdebug.remote_port=9008</span><br><span class="line">xdebug.idekey=&quot;PHPSTORM&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>语言</category>
      </categories>
      <tags>
        <tag>Php</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用</title>
    <url>/2020/01/28/hexo/hexo%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<ul>
<li>官方文档地址（中文）：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></li>
</ul>
<p>在github上建立静态博客</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、github上新建仓库：&lt;user-name&gt;.github.io</span><br><span class="line">2、全局安装hexo：npm install -g hexo</span><br><span class="line">3、初始化项目：hexo init</span><br><span class="line">4、部署到github：npm install hexo-deployer-git --save</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
